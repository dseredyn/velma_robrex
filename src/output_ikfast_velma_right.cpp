/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-09-08 17:48:30.741565
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77;
x0=IKcos(j[5]);
x1=IKsin(j[1]);
x2=IKcos(j[0]);
x3=IKcos(j[3]);
x4=(x1*x2*x3);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=IKcos(j[1]);
x11=IKcos(j[2]);
x12=(x11*x2);
x13=(x10*x12);
x14=(x13+(((-1.0)*(1.0)*x9)));
x15=(((x14*x5))+(((-1.0)*(1.0)*x4)));
x16=IKsin(j[5]);
x17=IKsin(j[4]);
x18=(x11*x6);
x19=(x2*x7);
x20=((((-1.0)*(1.0)*x10*x19))+(((-1.0)*(1.0)*x18)));
x21=(x17*x20);
x22=IKcos(j[4]);
x23=(x1*x2);
x24=(x23*x5);
x25=(x22*((((x14*x3))+x24)));
x26=IKcos(j[6]);
x27=(x20*x22);
x28=((1.0)*x3);
x29=(x17*(((((-1.0)*(1.0)*x24))+(((-1.0)*(1.0)*x14*x28)))));
x30=(x27+x29);
x31=IKsin(j[6]);
x32=(x15*x16);
x33=(x0*((x21+x25)));
x34=(x10*x3);
x35=(x1*x11*x5);
x36=((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x34)));
x37=(x0*x36);
x38=(x1*x3*x6);
x39=(x10*x18);
x40=(x19+x39);
x41=((((-1.0)*(1.0)*x38))+((x40*x5)));
x42=(x0*x41);
x43=(x1*x7);
x44=(x17*x43);
x45=(x10*x5);
x46=(x1*x11*x28);
x47=(x22*((x45+(((-1.0)*(1.0)*x46)))));
x48=(x16*(((((-1.0)*(1.0)*x44))+(((-1.0)*(1.0)*x47)))));
x49=(x12+(((-1.0)*(1.0)*x10*x9)));
x50=(x17*x49);
x51=(x1*x6);
x52=(x5*x51);
x53=(x22*((((x3*x40))+x52)));
x54=(x16*(((((-1.0)*(1.0)*x53))+(((-1.0)*(1.0)*x50)))));
x55=(x22*x43);
x56=(x17*(((((-1.0)*(1.0)*x45))+x46)));
x57=(x55+x56);
x58=(x26*x57);
x59=(x22*x49);
x60=(x17*(((((-1.0)*(1.0)*x52))+(((-1.0)*(1.0)*x28*x40)))));
x61=(x60+x59);
x62=(x26*x61);
x63=(x16*x36);
x64=(x0*((x44+x47)));
x65=(x31*(((((-1.0)*(1.0)*x64))+(((-1.0)*(1.0)*x63)))));
x66=(x16*x41);
x67=(x0*((x50+x53)));
x68=(x31*(((((-1.0)*(1.0)*x66))+(((-1.0)*(1.0)*x67)))));
x69=(x31*x57);
x70=(x31*x61);
x71=(x26*((x64+x63)));
x72=(x26*((x66+x67)));
x73=(x5*(((((-1.0)*(0.39)*x19))+(((-1.0)*(0.39)*x39)))));
x74=(x31*(((((0.235)*x56))+(((0.235)*x55)))));
x75=(x31*(((((0.235)*x60))+(((0.235)*x59)))));
x76=(x26*(((((0.235)*x64))+(((0.235)*x63)))));
x77=(x26*(((((0.235)*x66))+(((0.235)*x67)))));
eerot[0]=(((x16*(((((-1.0)*(1.0)*x25))+(((-1.0)*(1.0)*x21))))))+((x0*x15)));
eerot[1]=(((x26*x30))+((x31*(((((-1.0)*(1.0)*x32))+(((-1.0)*(1.0)*x33)))))));
eerot[2]=(((x26*((x33+x32))))+((x30*x31)));
eetrans[0]=(((x31*(((((0.235)*x27))+(((0.235)*x29))))))+(((0.4)*x23))+(((0.39)*x4))+((x5*(((((0.39)*x8))+(((-1.0)*(0.39)*x13))))))+((x26*(((((0.235)*x33))+(((0.235)*x32)))))));
eerot[3]=((((0.866025403784439)*x54))+(((0.5)*x48))+(((0.866025403784439)*x42))+(((0.5)*x37)));
eerot[4]=((((0.866025403784439)*x62))+(((0.5)*x65))+(((0.5)*x58))+(((0.866025403784439)*x68)));
eerot[5]=((((0.5)*x71))+(((0.5)*x69))+(((0.866025403784439)*x70))+(((0.866025403784439)*x72)));
eetrans[1]=((0.31935)+(((0.5)*x76))+(((0.866025403784439)*x77))+(((0.337749907475931)*x38))+(((0.195)*x35))+(((0.2)*x10))+(((0.866025403784439)*x75))+(((0.346410161513775)*x51))+(((0.195)*x34))+(((0.5)*x74))+(((0.866025403784439)*x73)));
eerot[6]=((((-1.0)*(0.5)*x54))+(((0.866025403784439)*x48))+(((-1.0)*(0.5)*x42))+(((0.866025403784439)*x37)));
eerot[7]=((((0.866025403784439)*x65))+(((-1.0)*(0.5)*x68))+(((0.866025403784439)*x58))+(((-1.0)*(0.5)*x62)));
eerot[8]=((((-1.0)*(0.5)*x70))+(((-1.0)*(0.5)*x72))+(((0.866025403784439)*x69))+(((0.866025403784439)*x71)));
eetrans[2]=((0.348330887794686)+(((0.866025403784439)*x74))+(((-1.0)*(0.195)*x38))+(((0.337749907475931)*x34))+(((-1.0)*(0.5)*x73))+(((-1.0)*(0.5)*x75))+(((-1.0)*(0.5)*x77))+(((0.337749907475931)*x35))+(((-1.0)*(0.2)*x51))+(((0.866025403784439)*x76))+(((0.346410161513775)*x10)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j19,cj19,sj19,htj19,j19mul,j20,cj20,sj20,htj20,j20mul,j22,cj22,sj22,htj22,j22mul,j23,cj23,sj23,htj23,j23mul,j24,cj24,sj24,htj24,j24mul,j25,cj25,sj25,htj25,j25mul,j21,cj21,sj21,htj21,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij19[2], _nj19,_ij20[2], _nj20,_ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij21[2], _nj21;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1;  _ij21[0] = -1; _ij21[1] = -1; _nj21 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j21=pfree[0]; cj21=cos(pfree[0]); sj21=sin(pfree[0]), htj21=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*(((1.0)*r00)));
new_px=(px+(((-1.0)*(0.235)*r02)));
new_r10=((((0.866025403784439)*r12))+(((-1.0)*(0.5)*r22)));
new_r11=((((-1.0)*(0.5)*r21))+(((0.866025403784439)*r11)));
new_r12=((((-1.0)*(0.866025403784439)*r10))+(((0.5)*r20)));
new_py=((-0.102399768801217)+(((0.1175)*r22))+(((0.866025403784439)*py))+(((-1.0)*(0.5)*pz))+(((-1.0)*(0.203515969889343)*r12)));
new_r20=((((0.5)*r12))+(((0.866025403784439)*r22)));
new_r21=((((0.866025403784439)*r21))+(((0.5)*r11)));
new_r22=((((-1.0)*(0.5)*r10))+(((-1.0)*(0.866025403784439)*r20)));
new_pz=((-0.461338397752985)+(((0.5)*py))+(((0.866025403784439)*pz))+(((-1.0)*(0.1175)*r12))+(((-1.0)*(0.203515969889343)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x78=((1.0)*py);
IkReal x79=((1.0)*pz);
IkReal x80=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x78))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x79)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x80)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x78)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x79)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x80)));
rxp2_0=((((-1.0)*r22*x78))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x79))+((px*r22)));
rxp2_2=((((-1.0)*r12*x80))+((py*r02)));
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
cj22array[0]=((-1.00032051282051)+(((3.20512820512821)*pp)));
if( cj22array[0] >= -1-IKFAST_SINCOS_THRESH && cj22array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j22valid[0] = j22valid[1] = true;
    j22array[0] = IKacos(cj22array[0]);
    sj22array[0] = IKsin(j22array[0]);
    cj22array[1] = cj22array[0];
    j22array[1] = -j22array[0];
    sj22array[1] = -sj22array[0];
}
else if( isnan(cj22array[0]) )
{
    // probably any value will work
    j22valid[0] = true;
    cj22array[0] = 1; sj22array[0] = 0; j22array[0] = 0;
}
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
IkReal j19eval[2];
j19eval[0]=((IKabs(py))+(IKabs(px)));
j19eval[1]=((py*py)+(px*px));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
j20eval[0]=((1.05193951347797)+(((2.05128205128205)*cj22))+(cj22*cj22)+(((cj21*cj21)*(sj22*sj22))));
j20eval[1]=((IKabs((cj21*sj22)))+(((2.56410256410256)*(IKabs(((-0.4)+(((-1.0)*(0.39)*cj22))))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal j19eval[2];
IkReal x81=cj21*cj21*cj21*cj21;
IkReal x82=py*py*py*py;
IkReal x83=sj21*sj21*sj21*sj21;
IkReal x84=px*px;
IkReal x85=py*py;
IkReal x86=(x84*x85);
IkReal x87=sj21*sj21;
IkReal x88=((2.0)*x87);
IkReal x89=cj21*cj21;
IkReal x90=(px*py);
j19eval[0]=(((x81*x82))+((x83*x86))+((x84*x85*x88*x89))+((x81*x86))+((x82*x88*x89))+((x82*x83)));
j19eval[1]=((IKabs((((x85*x89))+((x85*x87)))))+(IKabs((((x89*x90))+((x87*x90))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j19, j20]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x91=cj21*cj21;
IkReal x92=((1.0)*(py*py));
IkReal x93=sj21*sj21;
IkReal x94=((((-1.0)*x92*x93))+(((-1.0)*x91*x92)));
IkReal x95=(px*py);
IkReal x96=(((x93*x95))+((x91*x95)));
CheckValue<IkReal> x99 = IKatan2WithCheck(IkReal(x94),x96,IKFAST_ATAN2_MAGTHRESH);
if(!x99.valid){
continue;
}
IkReal x97=((-1.0)*(x99.value));
if((((x96*x96)+(x94*x94))) < -0.00001)
continue;
CheckValue<IkReal> x100=IKPowWithIntegerCheck(IKabs(IKsqrt(((x96*x96)+(x94*x94)))),-1);
if(!x100.valid){
continue;
}
if( (((0.39)*py*sj21*sj22*(x100.value))) < -1-IKFAST_SINCOS_THRESH || (((0.39)*py*sj21*sj22*(x100.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x98=IKasin(((0.39)*py*sj21*sj22*(x100.value)));
j19array[0]=(x98+x97);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x98))+x97);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x101=IKsin(j19);
IkReal x102=((0.39)*sj21*sj22);
IkReal x103=IKcos(j19);
IkReal x104=cj21*cj21;
IkReal x105=px*px;
IkReal x106=sj21*sj21;
IkReal x107=((1.0)*px*py);
evalcond[0]=(((px*x101))+(((-1.0)*py*x103))+(((-1.0)*x102)));
evalcond[1]=(((x103*(((((-1.0)*x106*x107))+(((-1.0)*x104*x107))))))+(((-1.0)*px*x102))+((x101*((((x104*x105))+((x105*x106)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j20eval[3];
IkReal x108=(cj19*px);
IkReal x109=(py*sj19);
IkReal x110=(cj21*sj22);
IkReal x111=(pz*x110);
IkReal x112=(cj19*cj22*px);
IkReal x113=(cj22*py*sj19);
IkReal x114=((100.0)*pz);
j20eval[0]=((((-1.02564102564103)*x109))+(((-1.0)*x113))+(((-1.0)*x112))+x111+(((-1.02564102564103)*x108)));
j20eval[1]=((IKabs(((((15.6)*x110))+(((15.21)*cj22*x110))+(((-1.0)*x109*x114))+(((-1.0)*x108*x114)))))+(IKabs(((-16.0)+(((100.0)*(pz*pz)))+(((-1.0)*(31.2)*cj22))+(((-1.0)*(15.21)*(cj22*cj22)))))));
j20eval[2]=IKsign(((((-40.0)*x108))+(((39.0)*x111))+(((-39.0)*x112))+(((-39.0)*x113))+(((-40.0)*x109))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x115=cj21*cj21;
IkReal x116=cj22*cj22;
IkReal x117=((3900.0)*cj22);
IkReal x118=(cj19*px);
IkReal x119=((3900.0)*cj21*sj22);
IkReal x120=(py*sj19);
IkReal x121=((1521.0)*x115);
j20eval[0]=((1.05193951347797)+(((2.05128205128205)*cj22))+(((-1.0)*x115*x116))+x115+x116);
j20eval[1]=((IKabs((((pz*x119))+(((4000.0)*x120))+((x117*x120))+(((4000.0)*x118))+((x117*x118)))))+(IKabs(((((-1.0)*x119*x120))+(((4000.0)*pz))+(((-1.0)*x118*x119))+((pz*x117))))));
j20eval[2]=IKsign(((1600.0)+x121+(((3120.0)*cj22))+(((1521.0)*x116))+(((-1.0)*x116*x121))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
IkReal x122=(pz*sj21);
IkReal x123=(cj22*pz*sj21);
IkReal x124=(cj19*cj21*px*sj21*sj22);
IkReal x125=(cj21*py*sj19*sj21*sj22);
j20eval[0]=((((-1.0)*x123))+(((-1.02564102564103)*x122))+(((-1.0)*x124))+(((-1.0)*x125)));
j20eval[1]=IKsign(((((-39.0)*x125))+(((-39.0)*x123))+(((-39.0)*x124))+(((-40.0)*x122))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x126=(px*sj19);
IkReal x127=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*x127))+x126);
evalcond[3]=(x127+(((-1.0)*x126)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x128=(cj19*px);
IkReal x129=(py*sj19);
IkReal x130=(pz*sj22);
IkReal x131=(cj19*pp*px);
IkReal x132=(pp*py*sj19);
IkReal x133=((100.0)*pz);
j20eval[0]=(x128+x129+(((-39.4936708860759)*x130))+(((126.582278481013)*x132))+(((126.582278481013)*x131)));
j20eval[1]=((IKabs(((((-1.0)*(15.21)*cj22*sj22))+((x128*x133))+(((-1.0)*(15.6)*sj22))+((x129*x133)))))+(IKabs(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp))))));
j20eval[2]=IKsign(((((125.0)*x131))+(((125.0)*x132))+(((0.9875)*x128))+(((-39.0)*x130))+(((0.9875)*x129))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x134=(cj22*pp);
IkReal x135=cj22*cj22;
IkReal x136=((3900.0)*pz);
IkReal x137=((3900.0)*sj22);
IkReal x138=(cj19*px);
IkReal x139=(py*sj19);
IkReal x140=((12500.0)*pp);
j20eval[0]=((-40.519311911717)+(((-126.582278481013)*x134))+(((-1.0)*(129.827977929244)*pp))+(((39.4936708860759)*x135))+(((-1.0)*(1.0)*cj22)));
j20eval[1]=((IKabs((((x137*x138))+(((-1.0)*cj22*x136))+((x137*x139))+(((-1.0)*(4000.0)*pz)))))+(IKabs(((((-1.0)*sj22*x136))+(((-98.75)*x139))+(((-98.75)*x138))+(((-1.0)*x138*x140))+(((-1.0)*x139*x140))))));
j20eval[2]=IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((1521.0)*x135))+(((-4875.0)*x134))+(((-1.0)*(5000.0)*pp))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
sj21=0;
cj21=1.0;
j21=0;
IkReal x141=((39.4936708860759)*sj22);
j20eval[0]=((((-1.0)*cj19*px*x141))+(((-1.0)*(126.582278481013)*pp*pz))+(((-1.0)*(1.0)*pz))+(((-1.0)*py*sj19*x141)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst0=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x142=(px*sj19);
IkReal x143=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst0))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst0))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*x143))+x142);
evalcond[3]=(x143+(((-1.0)*x142)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x144=(cj19*px);
IkReal x145=(py*sj19);
IkReal x146=((0.39)*gconst0);
IkReal x147=gconst0*gconst0;
if((((1.0)+(((-1.0)*x147)))) < -0.00001)
continue;
IkReal x148=IKsqrt(((1.0)+(((-1.0)*x147))));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(IKsign(((((-0.39)*pz*x148))+(((0.4)*x145))+((x144*x146))+((x145*x146))+(((0.4)*x144)))),-1);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150 = IKatan2WithCheck(IkReal(((0.16)+(((0.312)*gconst0))+(((-1.0)*(1.0)*(pz*pz)))+(((0.1521)*x147)))),((((-0.156)*x148))+(((-0.1521)*gconst0*x148))+((pz*x144))+((pz*x145))),IKFAST_ATAN2_MAGTHRESH);
if(!x150.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x149.value)))+(x150.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x151=IKcos(j20);
IkReal x152=(pz*x151);
IkReal x153=(cj19*px);
IkReal x154=IKsin(j20);
IkReal x155=((0.8)*x154);
IkReal x156=(py*sj19);
IkReal x157=((0.39)*gconst0);
IkReal x158=((1.0)*x153);
IkReal x159=((1.0)*x156);
if((((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x160=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0)))))));
evalcond[0]=((-0.32)+((x155*x156))+((x153*x155))+(((0.8)*x152))+(((-1.0)*(0.312)*gconst0)));
evalcond[1]=((0.4)+x157+(((-1.0)*x154*x159))+(((-1.0)*x154*x158))+(((-1.0)*x152)));
evalcond[2]=((((-0.4)*x151))+pz+(((-1.0)*x151*x157))+(((-1.0)*x154*x160)));
evalcond[3]=((((-1.0)*x160))+(((-1.0)*x151*x159))+(((-1.0)*x151*x158))+((pz*x154)));
evalcond[4]=((((-1.0)*x151*x160))+((x154*x157))+(((0.4)*x154))+(((-1.0)*x158))+(((-1.0)*x159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst0=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x618=(px*sj19);
IkReal x619=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst0))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst0))+(((-1.0)*(1.0)*pp)));
evalcond[2]=(x618+(((-1.0)*x619)));
evalcond[3]=(x619+(((-1.0)*x618)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x620=(cj19*px);
IkReal x621=(py*sj19);
IkReal x622=((0.39)*gconst0);
IkReal x623=gconst0*gconst0;
if((((1.0)+(((-1.0)*x623)))) < -0.00001)
continue;
IkReal x624=IKsqrt(((1.0)+(((-1.0)*x623))));
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign(((((0.39)*pz*x624))+(((0.4)*x621))+((x620*x622))+(((0.4)*x620))+((x621*x622)))),-1);
if(!x625.valid){
continue;
}
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(((0.16)+(((0.312)*gconst0))+(((-1.0)*(1.0)*(pz*pz)))+(((0.1521)*x623)))),((((0.156)*x624))+((pz*x620))+(((0.1521)*gconst0*x624))+((pz*x621))),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x625.value)))+(x626.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x627=IKcos(j20);
IkReal x628=(pz*x627);
IkReal x629=(cj19*px);
IkReal x630=IKsin(j20);
IkReal x631=((0.8)*x630);
IkReal x632=(py*sj19);
IkReal x633=((0.39)*gconst0);
IkReal x634=((1.0)*x629);
IkReal x635=((1.0)*x632);
if((((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x636=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0)))))));
evalcond[0]=((-0.32)+((x631*x632))+(((0.8)*x628))+(((-1.0)*(0.312)*gconst0))+((x629*x631)));
evalcond[1]=((0.4)+(((-1.0)*x630*x634))+(((-1.0)*x630*x635))+x633+(((-1.0)*x628)));
evalcond[2]=((((-1.0)*x627*x633))+pz+(((-0.4)*x627))+((x630*x636)));
evalcond[3]=(x636+(((-1.0)*x627*x634))+((pz*x630))+(((-1.0)*x627*x635)));
evalcond[4]=(((x627*x636))+(((0.4)*x630))+(((-1.0)*x634))+(((-1.0)*x635))+((x630*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst1=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x637=(px*sj19);
IkReal x638=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst1))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst1))+(((-1.0)*(1.0)*pp)));
evalcond[2]=(x637+(((-1.0)*x638)));
evalcond[3]=((((-1.0)*x637))+x638);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x639=(cj19*px);
IkReal x640=(py*sj19);
IkReal x641=((0.39)*gconst1);
IkReal x642=gconst1*gconst1;
if((((1.0)+(((-1.0)*x642)))) < -0.00001)
continue;
IkReal x643=IKsqrt(((1.0)+(((-1.0)*x642))));
CheckValue<IkReal> x644=IKPowWithIntegerCheck(IKsign((((x639*x641))+((x640*x641))+(((0.4)*x639))+(((0.4)*x640))+(((-0.39)*pz*x643)))),-1);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645 = IKatan2WithCheck(IkReal(((0.16)+(((0.312)*gconst1))+(((0.1521)*x642))+(((-1.0)*(1.0)*(pz*pz))))),(((pz*x639))+(((-0.1521)*gconst1*x643))+((pz*x640))+(((-0.156)*x643))),IKFAST_ATAN2_MAGTHRESH);
if(!x645.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x644.value)))+(x645.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x646=IKcos(j20);
IkReal x647=(pz*x646);
IkReal x648=(cj19*px);
IkReal x649=IKsin(j20);
IkReal x650=((0.8)*x649);
IkReal x651=(py*sj19);
IkReal x652=((0.39)*gconst1);
IkReal x653=((1.0)*x648);
IkReal x654=((1.0)*x651);
if((((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x655=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1)))))));
evalcond[0]=((-0.32)+((x648*x650))+(((0.8)*x647))+((x650*x651))+(((-1.0)*(0.312)*gconst1)));
evalcond[1]=((0.4)+(((-1.0)*x649*x654))+x652+(((-1.0)*x647))+(((-1.0)*x649*x653)));
evalcond[2]=((((-1.0)*x646*x652))+pz+(((-1.0)*x649*x655))+(((-0.4)*x646)));
evalcond[3]=(((pz*x649))+(((-1.0)*x655))+(((-1.0)*x646*x653))+(((-1.0)*x646*x654)));
evalcond[4]=((((0.4)*x649))+(((-1.0)*x653))+(((-1.0)*x654))+(((-1.0)*x646*x655))+((x649*x652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst1=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x656=(px*sj19);
IkReal x657=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst1))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst1))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*x657))+x656);
evalcond[3]=((((-1.0)*x656))+x657);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x658=(cj19*px);
IkReal x659=(py*sj19);
IkReal x660=((0.39)*gconst1);
IkReal x661=gconst1*gconst1;
if((((1.0)+(((-1.0)*x661)))) < -0.00001)
continue;
IkReal x662=IKsqrt(((1.0)+(((-1.0)*x661))));
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x661))+(((0.312)*gconst1))+(((-1.0)*(1.0)*(pz*pz))))),((((0.1521)*gconst1*x662))+((pz*x658))+((pz*x659))+(((0.156)*x662))),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign(((((0.4)*x659))+(((0.4)*x658))+((x658*x660))+(((0.39)*pz*x662))+((x659*x660)))),-1);
if(!x664.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x663.value)+(((1.5707963267949)*(x664.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x665=IKcos(j20);
IkReal x666=(pz*x665);
IkReal x667=(cj19*px);
IkReal x668=IKsin(j20);
IkReal x669=((0.8)*x668);
IkReal x670=(py*sj19);
IkReal x671=((0.39)*gconst1);
IkReal x672=((1.0)*x667);
IkReal x673=((1.0)*x670);
if((((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x674=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1)))))));
evalcond[0]=((-0.32)+((x667*x669))+((x669*x670))+(((-1.0)*(0.312)*gconst1))+(((0.8)*x666)));
evalcond[1]=((0.4)+(((-1.0)*x666))+x671+(((-1.0)*x668*x672))+(((-1.0)*x668*x673)));
evalcond[2]=((((-1.0)*x665*x671))+((x668*x674))+pz+(((-0.4)*x665)));
evalcond[3]=((((-1.0)*x665*x673))+(((-1.0)*x665*x672))+((pz*x668))+x674);
evalcond[4]=((((0.4)*x668))+((x668*x671))+(((-1.0)*x672))+((x665*x674))+(((-1.0)*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x675=((100.0)*pz);
IkReal x676=(pp*pz);
IkReal x677=(cj19*px*sj22);
IkReal x678=(py*sj19*sj22);
CheckValue<IkReal> x679=IKPowWithIntegerCheck(((((-39.0)*x677))+(((-125.0)*x676))+(((-39.0)*x678))+(((-1.0)*(0.9875)*pz))),-1);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(((((-3900.0)*x677))+(((-1.0)*(98.75)*pz))+(((-3900.0)*x678))+(((-12500.0)*x676))),-1);
if(!x680.valid){
continue;
}
if( IKabs(((x679.value)*(((((-1.0)*py*sj19*x675))+(((-1.0)*cj19*px*x675))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x680.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x679.value)*(((((-1.0)*py*sj19*x675))+(((-1.0)*cj19*px*x675))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22))))))+IKsqr(((x680.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((x679.value)*(((((-1.0)*py*sj19*x675))+(((-1.0)*cj19*px*x675))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22))))), ((x680.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x681=IKcos(j20);
IkReal x682=IKsin(j20);
IkReal x683=((0.39)*sj22);
IkReal x684=(cj19*px);
IkReal x685=((1.0)*x684);
IkReal x686=(py*sj19);
IkReal x687=((1.0)*x686);
IkReal x688=(pz*x681);
IkReal x689=((0.8)*x682);
IkReal x690=((0.39)*cj22);
evalcond[0]=((((-1.25)*pp*x681))+pz+(((-1.0)*x682*x683))+(((-0.009875)*x681)));
evalcond[1]=((((-1.0)*x681*x685))+(((-1.0)*x681*x687))+((pz*x682))+(((-1.0)*x683)));
evalcond[2]=((-0.0079)+((x686*x689))+(((-1.0)*(1.0)*pp))+((x684*x689))+(((0.8)*x688)));
evalcond[3]=((0.4)+(((-1.0)*x682*x685))+(((-1.0)*x688))+(((-1.0)*x682*x687))+x690);
evalcond[4]=((((-1.0)*x687))+(((-1.0)*x685))+(((0.4)*x682))+(((-1.0)*x681*x683))+((x682*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x691=(cj19*px);
IkReal x692=(py*sj19);
IkReal x693=((3900.0)*pz);
IkReal x694=((12500.0)*pp);
IkReal x695=((3900.0)*sj22);
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(((((-1.0)*x691*x694))+(((-1.0)*sj22*x693))+(((-98.75)*x691))+(((-1.0)*x692*x694))+(((-98.75)*x692)))),((((-1.0)*cj22*x693))+((x691*x695))+((x692*x695))+(((-1.0)*(4000.0)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((-1.0)*(5000.0)*pp))+(((1521.0)*(cj22*cj22)))+(((-1.0)*(4875.0)*cj22*pp)))),-1);
if(!x697.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x696.value)+(((1.5707963267949)*(x697.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x698=IKcos(j20);
IkReal x699=IKsin(j20);
IkReal x700=((0.39)*sj22);
IkReal x701=(cj19*px);
IkReal x702=((1.0)*x701);
IkReal x703=(py*sj19);
IkReal x704=((1.0)*x703);
IkReal x705=(pz*x698);
IkReal x706=((0.8)*x699);
IkReal x707=((0.39)*cj22);
evalcond[0]=((((-0.009875)*x698))+pz+(((-1.25)*pp*x698))+(((-1.0)*x699*x700)));
evalcond[1]=((((-1.0)*x700))+((pz*x699))+(((-1.0)*x698*x702))+(((-1.0)*x698*x704)));
evalcond[2]=((-0.0079)+(((0.8)*x705))+((x703*x706))+((x701*x706))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x705))+(((-1.0)*x699*x704))+x707+(((-1.0)*x699*x702)));
evalcond[4]=(((x699*x707))+(((-1.0)*x698*x700))+(((-1.0)*x704))+(((-1.0)*x702))+(((0.4)*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x708=(cj19*px);
IkReal x709=(py*sj19);
IkReal x710=((125.0)*pp);
IkReal x711=((100.0)*pz);
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign((((x709*x710))+(((-1.0)*(39.0)*pz*sj22))+((x708*x710))+(((0.9875)*x709))+(((0.9875)*x708)))),-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp)))),((((-1.0)*(15.21)*cj22*sj22))+(((-1.0)*(15.6)*sj22))+((x709*x711))+((x708*x711))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x712.value)))+(x713.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x714=IKcos(j20);
IkReal x715=IKsin(j20);
IkReal x716=((0.39)*sj22);
IkReal x717=(cj19*px);
IkReal x718=((1.0)*x717);
IkReal x719=(py*sj19);
IkReal x720=((1.0)*x719);
IkReal x721=(pz*x714);
IkReal x722=((0.8)*x715);
IkReal x723=((0.39)*cj22);
evalcond[0]=(pz+(((-1.25)*pp*x714))+(((-1.0)*x715*x716))+(((-0.009875)*x714)));
evalcond[1]=((((-1.0)*x714*x718))+((pz*x715))+(((-1.0)*x716))+(((-1.0)*x714*x720)));
evalcond[2]=((-0.0079)+(((0.8)*x721))+((x717*x722))+((x719*x722))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x715*x720))+(((-1.0)*x721))+(((-1.0)*x715*x718))+x723);
evalcond[4]=((((-1.0)*x714*x716))+(((-1.0)*x718))+((x715*x723))+(((0.4)*x715))+(((-1.0)*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x724=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x724;
evalcond[3]=x724;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x725=(cj19*px);
IkReal x726=(py*sj19);
IkReal x727=(pz*sj22);
IkReal x728=(cj19*pp*px);
IkReal x729=(pp*py*sj19);
IkReal x730=((100.0)*pz);
j20eval[0]=((((126.582278481013)*x729))+(((126.582278481013)*x728))+(((39.4936708860759)*x727))+x725+x726);
j20eval[1]=IKsign(((((125.0)*x728))+(((39.0)*x727))+(((125.0)*x729))+(((0.9875)*x725))+(((0.9875)*x726))));
j20eval[2]=((IKabs((((x726*x730))+(((15.21)*cj22*sj22))+(((15.6)*sj22))+((x725*x730)))))+(IKabs(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x731=(cj22*pp);
IkReal x732=cj22*cj22;
IkReal x733=((3900.0)*pz);
IkReal x734=((3900.0)*sj22);
IkReal x735=(cj19*px);
IkReal x736=(py*sj19);
IkReal x737=((12500.0)*pp);
j20eval[0]=((-40.519311911717)+(((-126.582278481013)*x731))+(((-1.0)*(129.827977929244)*pp))+(((-1.0)*(1.0)*cj22))+(((39.4936708860759)*x732)));
j20eval[1]=IKsign(((-1560.5)+(((-4875.0)*x731))+(((-1.0)*(38.5125)*cj22))+(((1521.0)*x732))+(((-1.0)*(5000.0)*pp))));
j20eval[2]=((IKabs(((((-1.0)*cj22*x733))+(((-1.0)*x734*x735))+(((-1.0)*x734*x736))+(((-1.0)*(4000.0)*pz)))))+(IKabs(((((-1.0)*x735*x737))+(((-98.75)*x736))+((sj22*x733))+(((-1.0)*x736*x737))+(((-98.75)*x735))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x738=((39.4936708860759)*sj22);
j20eval[0]=((((-1.0)*(126.582278481013)*pp*pz))+(((-1.0)*(1.0)*pz))+((py*sj19*x738))+((cj19*px*x738)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst2=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x739=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst2))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((-1.0)*(1.0)*pp))+(((0.312)*gconst2)));
evalcond[2]=x739;
evalcond[3]=x739;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x740=(cj19*px);
IkReal x741=(py*sj19);
IkReal x742=((0.39)*gconst2);
IkReal x743=gconst2*gconst2;
if((((1.0)+(((-1.0)*x743)))) < -0.00001)
continue;
IkReal x744=IKsqrt(((1.0)+(((-1.0)*x743))));
CheckValue<IkReal> x745=IKPowWithIntegerCheck(IKsign(((((0.4)*x741))+((x740*x742))+(((0.4)*x740))+(((0.39)*pz*x744))+((x741*x742)))),-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x743))+(((-1.0)*(1.0)*(pz*pz)))+(((0.312)*gconst2)))),(((pz*x740))+((pz*x741))+(((0.156)*x744))+(((0.1521)*gconst2*x744))),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x745.value)))+(x746.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x747=IKcos(j20);
IkReal x748=(cj19*px);
IkReal x749=IKsin(j20);
IkReal x750=((0.8)*x749);
IkReal x751=(py*sj19);
IkReal x752=((0.39)*gconst2);
IkReal x753=((1.0)*pz);
IkReal x754=((1.0)*x748);
IkReal x755=((1.0)*x751);
if((((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x756=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2)))))));
evalcond[0]=((-0.32)+((x750*x751))+((x748*x750))+(((-1.0)*(0.312)*gconst2))+(((0.8)*pz*x747)));
evalcond[1]=((0.4)+(((-1.0)*x749*x754))+(((-1.0)*x749*x755))+(((-1.0)*x747*x753))+x752);
evalcond[2]=(pz+(((-0.4)*x747))+((x749*x756))+(((-1.0)*x747*x752)));
evalcond[3]=(((x747*x751))+((x747*x748))+(((-1.0)*x749*x753))+(((-1.0)*x756)));
evalcond[4]=(((x747*x756))+(((-1.0)*x755))+(((0.4)*x749))+(((-1.0)*x754))+((x749*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst2=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x757=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst2))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((-1.0)*(1.0)*pp))+(((0.312)*gconst2)));
evalcond[2]=x757;
evalcond[3]=x757;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x758=(cj19*px);
IkReal x759=(py*sj19);
IkReal x760=((0.39)*gconst2);
IkReal x761=gconst2*gconst2;
if((((1.0)+(((-1.0)*x761)))) < -0.00001)
continue;
IkReal x762=IKsqrt(((1.0)+(((-1.0)*x761))));
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x761))+(((-1.0)*(1.0)*(pz*pz)))+(((0.312)*gconst2)))),((((-0.156)*x762))+((pz*x758))+(((-0.1521)*gconst2*x762))+((pz*x759))),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764=IKPowWithIntegerCheck(IKsign(((((-0.39)*pz*x762))+((x758*x760))+(((0.4)*x758))+(((0.4)*x759))+((x759*x760)))),-1);
if(!x764.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x763.value)+(((1.5707963267949)*(x764.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x765=IKcos(j20);
IkReal x766=(cj19*px);
IkReal x767=IKsin(j20);
IkReal x768=((0.8)*x767);
IkReal x769=(py*sj19);
IkReal x770=((0.39)*gconst2);
IkReal x771=((1.0)*pz);
IkReal x772=((1.0)*x766);
IkReal x773=((1.0)*x769);
if((((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x774=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2)))))));
evalcond[0]=((-0.32)+(((0.8)*pz*x765))+((x766*x768))+(((-1.0)*(0.312)*gconst2))+((x768*x769)));
evalcond[1]=((0.4)+(((-1.0)*x765*x771))+(((-1.0)*x767*x773))+x770+(((-1.0)*x767*x772)));
evalcond[2]=(pz+(((-1.0)*x767*x774))+(((-0.4)*x765))+(((-1.0)*x765*x770)));
evalcond[3]=(((x765*x769))+((x765*x766))+x774+(((-1.0)*x767*x771)));
evalcond[4]=((((-1.0)*x765*x774))+((x767*x770))+(((-1.0)*x773))+(((0.4)*x767))+(((-1.0)*x772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst3=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x775=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj22+(((-1.0)*(1.0)*gconst3)))))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst3))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x775;
evalcond[3]=x775;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x776=(cj19*px);
IkReal x777=(py*sj19);
IkReal x778=((0.39)*gconst3);
IkReal x779=gconst3*gconst3;
if((((1.0)+(((-1.0)*x779)))) < -0.00001)
continue;
IkReal x780=IKsqrt(((1.0)+(((-1.0)*x779))));
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x779))+(((0.312)*gconst3))+(((-1.0)*(1.0)*(pz*pz))))),((((0.156)*x780))+(((0.1521)*gconst3*x780))+((pz*x776))+((pz*x777))),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign((((x777*x778))+((x776*x778))+(((0.4)*x776))+(((0.39)*pz*x780))+(((0.4)*x777)))),-1);
if(!x782.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x781.value)+(((1.5707963267949)*(x782.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x783=IKcos(j20);
IkReal x784=(cj19*px);
IkReal x785=IKsin(j20);
IkReal x786=((0.8)*x785);
IkReal x787=(py*sj19);
IkReal x788=((0.39)*gconst3);
IkReal x789=((1.0)*pz);
IkReal x790=((1.0)*x784);
IkReal x791=((1.0)*x787);
if((((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3))))) < -0.00001)
continue;
IkReal x792=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3)))))));
evalcond[0]=((-0.32)+((x786*x787))+((x784*x786))+(((-1.0)*(0.312)*gconst3))+(((0.8)*pz*x783)));
evalcond[1]=((0.4)+x788+(((-1.0)*x785*x790))+(((-1.0)*x783*x789))+(((-1.0)*x785*x791)));
evalcond[2]=(pz+(((-1.0)*x783*x788))+((x785*x792))+(((-0.4)*x783)));
evalcond[3]=(((x783*x784))+(((-1.0)*x785*x789))+(((-1.0)*x792))+((x783*x787)));
evalcond[4]=(((x785*x788))+(((-1.0)*x791))+((x783*x792))+(((-1.0)*x790))+(((0.4)*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst3=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x793=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj22+(((-1.0)*(1.0)*gconst3)))))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst3))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x793;
evalcond[3]=x793;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x794=(cj19*px);
IkReal x795=(py*sj19);
IkReal x796=((0.39)*gconst3);
IkReal x797=gconst3*gconst3;
if((((1.0)+(((-1.0)*x797)))) < -0.00001)
continue;
IkReal x798=IKsqrt(((1.0)+(((-1.0)*x797))));
CheckValue<IkReal> x799=IKPowWithIntegerCheck(IKsign(((((0.4)*x795))+((x795*x796))+((x794*x796))+(((-0.39)*pz*x798))+(((0.4)*x794)))),-1);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x797))+(((0.312)*gconst3))+(((-1.0)*(1.0)*(pz*pz))))),(((pz*x794))+(((-0.156)*x798))+((pz*x795))+(((-0.1521)*gconst3*x798))),IKFAST_ATAN2_MAGTHRESH);
if(!x800.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x799.value)))+(x800.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x801=IKcos(j20);
IkReal x802=(cj19*px);
IkReal x803=IKsin(j20);
IkReal x804=((0.8)*x803);
IkReal x805=(py*sj19);
IkReal x806=((0.39)*gconst3);
IkReal x807=((1.0)*pz);
IkReal x808=((1.0)*x802);
IkReal x809=((1.0)*x805);
if((((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3))))) < -0.00001)
continue;
IkReal x810=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3)))))));
evalcond[0]=((-0.32)+(((0.8)*pz*x801))+((x802*x804))+(((-1.0)*(0.312)*gconst3))+((x804*x805)));
evalcond[1]=((0.4)+(((-1.0)*x803*x809))+x806+(((-1.0)*x801*x807))+(((-1.0)*x803*x808)));
evalcond[2]=(pz+(((-0.4)*x801))+(((-1.0)*x801*x806))+(((-1.0)*x803*x810)));
evalcond[3]=(((x801*x805))+x810+(((-1.0)*x803*x807))+((x801*x802)));
evalcond[4]=((((-1.0)*x801*x810))+(((0.4)*x803))+((x803*x806))+(((-1.0)*x809))+(((-1.0)*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x811=((100.0)*pz);
IkReal x812=(pp*pz);
IkReal x813=(cj19*px*sj22);
IkReal x814=(py*sj19*sj22);
CheckValue<IkReal> x815=IKPowWithIntegerCheck(((((39.0)*x814))+(((39.0)*x813))+(((-125.0)*x812))+(((-1.0)*(0.9875)*pz))),-1);
if(!x815.valid){
continue;
}
CheckValue<IkReal> x816=IKPowWithIntegerCheck(((((-12500.0)*x812))+(((3900.0)*x814))+(((-1.0)*(98.75)*pz))+(((3900.0)*x813))),-1);
if(!x816.valid){
continue;
}
if( IKabs(((x815.value)*(((((48.75)*pp*sj22))+(((-1.0)*cj19*px*x811))+(((0.385125)*sj22))+(((-1.0)*py*sj19*x811)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x816.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x815.value)*(((((48.75)*pp*sj22))+(((-1.0)*cj19*px*x811))+(((0.385125)*sj22))+(((-1.0)*py*sj19*x811))))))+IKsqr(((x816.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((x815.value)*(((((48.75)*pp*sj22))+(((-1.0)*cj19*px*x811))+(((0.385125)*sj22))+(((-1.0)*py*sj19*x811))))), ((x816.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x817=IKcos(j20);
IkReal x818=IKsin(j20);
IkReal x819=((0.39)*sj22);
IkReal x820=((1.0)*pz);
IkReal x821=(cj19*px);
IkReal x822=(py*sj19);
IkReal x823=((0.8)*x818);
IkReal x824=((0.39)*cj22);
IkReal x825=((1.0)*x821);
IkReal x826=((1.0)*x822);
evalcond[0]=(pz+((x818*x819))+(((-1.25)*pp*x817))+(((-0.009875)*x817)));
evalcond[1]=((((-1.0)*x818*x820))+((x817*x821))+(((-1.0)*x819))+((x817*x822)));
evalcond[2]=((-0.0079)+((x821*x823))+((x822*x823))+(((-1.0)*(1.0)*pp))+(((0.8)*pz*x817)));
evalcond[3]=((0.4)+(((-1.0)*x818*x825))+x824+(((-1.0)*x818*x826))+(((-1.0)*x817*x820)));
evalcond[4]=(((x817*x819))+(((-1.0)*x825))+((x818*x824))+(((-1.0)*x826))+(((0.4)*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x827=(cj19*px);
IkReal x828=(py*sj19);
IkReal x829=((3900.0)*pz);
IkReal x830=((12500.0)*pp);
IkReal x831=((3900.0)*sj22);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(((((-98.75)*x827))+(((-1.0)*x828*x830))+((sj22*x829))+(((-98.75)*x828))+(((-1.0)*x827*x830)))),((((-1.0)*x828*x831))+(((-1.0)*cj22*x829))+(((-1.0)*(4000.0)*pz))+(((-1.0)*x827*x831))),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((-1.0)*(5000.0)*pp))+(((1521.0)*(cj22*cj22)))+(((-1.0)*(4875.0)*cj22*pp)))),-1);
if(!x833.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x832.value)+(((1.5707963267949)*(x833.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x834=IKcos(j20);
IkReal x835=IKsin(j20);
IkReal x836=((0.39)*sj22);
IkReal x837=((1.0)*pz);
IkReal x838=(cj19*px);
IkReal x839=(py*sj19);
IkReal x840=((0.8)*x835);
IkReal x841=((0.39)*cj22);
IkReal x842=((1.0)*x838);
IkReal x843=((1.0)*x839);
evalcond[0]=((((-0.009875)*x834))+pz+((x835*x836))+(((-1.25)*pp*x834)));
evalcond[1]=((((-1.0)*x836))+((x834*x839))+((x834*x838))+(((-1.0)*x835*x837)));
evalcond[2]=((-0.0079)+(((0.8)*pz*x834))+((x838*x840))+((x839*x840))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+x841+(((-1.0)*x835*x842))+(((-1.0)*x834*x837))+(((-1.0)*x835*x843)));
evalcond[4]=((((-1.0)*x843))+(((0.4)*x835))+(((-1.0)*x842))+((x835*x841))+((x834*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x844=(cj19*px);
IkReal x845=(py*sj19);
IkReal x846=((125.0)*pp);
IkReal x847=((100.0)*pz);
CheckValue<IkReal> x848 = IKatan2WithCheck(IkReal(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp)))),(((x845*x847))+(((15.21)*cj22*sj22))+(((15.6)*sj22))+((x844*x847))),IKFAST_ATAN2_MAGTHRESH);
if(!x848.valid){
continue;
}
CheckValue<IkReal> x849=IKPowWithIntegerCheck(IKsign((((x844*x846))+(((0.9875)*x844))+(((0.9875)*x845))+((x845*x846))+(((39.0)*pz*sj22)))),-1);
if(!x849.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x848.value)+(((1.5707963267949)*(x849.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x850=IKcos(j20);
IkReal x851=IKsin(j20);
IkReal x852=((0.39)*sj22);
IkReal x853=((1.0)*pz);
IkReal x854=(cj19*px);
IkReal x855=(py*sj19);
IkReal x856=((0.8)*x851);
IkReal x857=((0.39)*cj22);
IkReal x858=((1.0)*x854);
IkReal x859=((1.0)*x855);
evalcond[0]=(pz+((x851*x852))+(((-0.009875)*x850))+(((-1.25)*pp*x850)));
evalcond[1]=(((x850*x854))+(((-1.0)*x852))+((x850*x855))+(((-1.0)*x851*x853)));
evalcond[2]=((-0.0079)+(((0.8)*pz*x850))+((x854*x856))+(((-1.0)*(1.0)*pp))+((x855*x856)));
evalcond[3]=((0.4)+(((-1.0)*x851*x858))+x857+(((-1.0)*x850*x853))+(((-1.0)*x851*x859)));
evalcond[4]=((((0.4)*x851))+(((-1.0)*x858))+(((-1.0)*x859))+((x851*x857))+((x850*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x860=(pz*sj21);
IkReal x861=(cj19*px);
IkReal x862=((39.0)*cj21*sj21*sj22);
IkReal x863=(py*sj19);
IkReal x864=((40.0)*cj21);
IkReal x865=(cj19*py);
IkReal x866=(px*sj19);
IkReal x867=((39.0)*cj21*cj22);
IkReal x868=((100.0)*pz*sj21);
IkReal x869=((39.0)*sj22*(cj21*cj21));
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((((-1.0)*x866*x867))+(((-1.0)*x864*x866))+(((-1.0)*x861*x868))+((x865*x867))+((x864*x865))+(((-1.0)*x863*x868)))),((((-1.0)*(100.0)*sj21*(pz*pz)))+((x866*x869))+(((-1.0)*x865*x869))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign(((((-40.0)*x860))+(((-1.0)*x861*x862))+(((-39.0)*cj22*x860))+(((-1.0)*x862*x863)))),-1);
if(!x871.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x870.value)+(((1.5707963267949)*(x871.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x872=IKcos(j20);
IkReal x873=((0.39)*cj22);
IkReal x874=IKsin(j20);
IkReal x875=((0.39)*cj21*sj22);
IkReal x876=(pz*x872);
IkReal x877=((0.8)*x874);
IkReal x878=((1.0)*cj19);
IkReal x879=(px*x878);
IkReal x880=((1.0)*sj19);
IkReal x881=(py*x880);
IkReal x882=(pz*x874);
IkReal x883=((1.0)*cj19*px*x872);
IkReal x884=((1.0)*py*sj19*x872);
evalcond[0]=((((-0.4)*x872))+pz+(((-1.0)*x872*x873))+(((-1.0)*x874*x875)));
evalcond[1]=((-0.0079)+(((0.8)*x876))+((cj19*px*x877))+((py*sj19*x877))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+(((-1.0)*x874*x881))+(((-1.0)*x876))+(((-1.0)*x874*x879))+x873);
evalcond[3]=((((-1.0)*x881))+(((-1.0)*x872*x875))+((x873*x874))+(((0.4)*x874))+(((-1.0)*x879)));
evalcond[4]=((((-1.0)*sj21*x884))+(((-1.0)*sj21*x883))+((sj21*x882))+((cj19*cj21*py))+(((-1.0)*cj21*px*x880)));
evalcond[5]=((((-1.0)*(0.39)*sj22))+(((-1.0)*cj21*x883))+(((-1.0)*py*sj21*x878))+(((-1.0)*cj21*x884))+((cj21*x882))+((px*sj19*sj21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x885=((1521.0)*(cj21*cj21));
IkReal x886=cj22*cj22;
IkReal x887=(cj19*px);
IkReal x888=(py*sj19);
IkReal x889=((3900.0)*cj22);
IkReal x890=((3900.0)*cj21*sj22);
CheckValue<IkReal> x891=IKPowWithIntegerCheck(IKsign(((1600.0)+(((3120.0)*cj22))+(((1521.0)*x886))+x885+(((-1.0)*x885*x886)))),-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal((((x887*x889))+(((4000.0)*x888))+((x888*x889))+(((4000.0)*x887))+((pz*x890)))),((((4000.0)*pz))+(((-1.0)*x887*x890))+((pz*x889))+(((-1.0)*x888*x890))),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x891.value)))+(x892.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x893=IKcos(j20);
IkReal x894=((0.39)*cj22);
IkReal x895=IKsin(j20);
IkReal x896=((0.39)*cj21*sj22);
IkReal x897=(pz*x893);
IkReal x898=((0.8)*x895);
IkReal x899=((1.0)*cj19);
IkReal x900=(px*x899);
IkReal x901=((1.0)*sj19);
IkReal x902=(py*x901);
IkReal x903=(pz*x895);
IkReal x904=((1.0)*cj19*px*x893);
IkReal x905=((1.0)*py*sj19*x893);
evalcond[0]=((((-1.0)*x893*x894))+(((-1.0)*x895*x896))+pz+(((-0.4)*x893)));
evalcond[1]=((-0.0079)+(((0.8)*x897))+((cj19*px*x898))+(((-1.0)*(1.0)*pp))+((py*sj19*x898)));
evalcond[2]=((0.4)+(((-1.0)*x895*x900))+(((-1.0)*x895*x902))+x894+(((-1.0)*x897)));
evalcond[3]=(((x894*x895))+(((0.4)*x895))+(((-1.0)*x900))+(((-1.0)*x902))+(((-1.0)*x893*x896)));
evalcond[4]=(((sj21*x903))+(((-1.0)*sj21*x904))+(((-1.0)*sj21*x905))+((cj19*cj21*py))+(((-1.0)*cj21*px*x901)));
evalcond[5]=(((cj21*x903))+(((-1.0)*(0.39)*sj22))+(((-1.0)*py*sj21*x899))+(((-1.0)*cj21*x904))+(((-1.0)*cj21*x905))+((px*sj19*sj21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x906=(cj19*px);
IkReal x907=(py*sj19);
IkReal x908=((39.0)*cj22);
IkReal x909=(cj21*sj22);
IkReal x910=((100.0)*pz);
CheckValue<IkReal> x911=IKPowWithIntegerCheck(IKsign(((((39.0)*pz*x909))+(((-1.0)*x906*x908))+(((-40.0)*x906))+(((-40.0)*x907))+(((-1.0)*x907*x908)))),-1);
if(!x911.valid){
continue;
}
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal(((-16.0)+(((100.0)*(pz*pz)))+(((-1.0)*(31.2)*cj22))+(((-1.0)*(15.21)*(cj22*cj22))))),((((15.6)*x909))+(((-1.0)*x906*x910))+(((15.21)*cj22*x909))+(((-1.0)*x907*x910))),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x911.value)))+(x912.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x913=IKcos(j20);
IkReal x914=((0.39)*cj22);
IkReal x915=IKsin(j20);
IkReal x916=((0.39)*cj21*sj22);
IkReal x917=(pz*x913);
IkReal x918=((0.8)*x915);
IkReal x919=((1.0)*cj19);
IkReal x920=(px*x919);
IkReal x921=((1.0)*sj19);
IkReal x922=(py*x921);
IkReal x923=(pz*x915);
IkReal x924=((1.0)*cj19*px*x913);
IkReal x925=((1.0)*py*sj19*x913);
evalcond[0]=((((-1.0)*x915*x916))+(((-1.0)*x913*x914))+(((-0.4)*x913))+pz);
evalcond[1]=((-0.0079)+((py*sj19*x918))+(((0.8)*x917))+(((-1.0)*(1.0)*pp))+((cj19*px*x918)));
evalcond[2]=((0.4)+(((-1.0)*x917))+(((-1.0)*x915*x920))+x914+(((-1.0)*x915*x922)));
evalcond[3]=((((0.4)*x915))+(((-1.0)*x920))+((x914*x915))+(((-1.0)*x913*x916))+(((-1.0)*x922)));
evalcond[4]=((((-1.0)*cj21*px*x921))+((sj21*x923))+(((-1.0)*sj21*x925))+(((-1.0)*sj21*x924))+((cj19*cj21*py)));
evalcond[5]=((((-1.0)*(0.39)*sj22))+((cj21*x923))+(((-1.0)*cj21*x925))+((px*sj19*sj21))+(((-1.0)*cj21*x924))+(((-1.0)*py*sj21*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x926=((-0.4)+(((-1.0)*(0.39)*cj22)));
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal(x926),((-1.0)*(((0.39)*cj21*sj22))),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
IkReal x927=((-1.0)*(x929.value));
if((((x926*x926)+(((0.1521)*(cj21*cj21)*(sj22*sj22))))) < -0.00001)
continue;
CheckValue<IkReal> x930=IKPowWithIntegerCheck(IKabs(IKsqrt(((x926*x926)+(((0.1521)*(cj21*cj21)*(sj22*sj22)))))),-1);
if(!x930.valid){
continue;
}
if( ((pz*(x930.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x930.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x928=IKasin((pz*(x930.value)));
j20array[0]=((((-1.0)*x928))+x927);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+x927+x928);
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal j19eval[3];
IkReal x931=((((-1.0)*(1.0)*sj20*(pz*pz)))+((pp*sj20)));
IkReal x932=((0.39)*cj22);
IkReal x933=((1.0)*cj20*pz);
IkReal x934=((0.39)*sj20*sj21*sj22);
j19eval[0]=x931;
j19eval[1]=((IKabs((((py*x932))+(((-1.0)*py*x933))+(((0.4)*py))+((px*x934)))))+(IKabs((((px*x932))+(((0.4)*px))+(((-1.0)*px*x933))+(((-1.0)*py*x934))))));
j19eval[2]=IKsign(x931);
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
IkReal x935=(pp*sj20);
IkReal x936=(sj20*(pz*pz));
IkReal x937=((125.0)*pp);
IkReal x938=((100.0)*cj20*pz);
IkReal x939=((39.0)*sj20*sj21*sj22);
j19eval[0]=((((-1.0)*x936))+x935);
j19eval[1]=((IKabs(((((-1.0)*py*x938))+((py*x937))+(((0.9875)*py))+((px*x939)))))+(IKabs((((px*x937))+(((-1.0)*px*x938))+(((0.9875)*px))+(((-1.0)*py*x939))))));
j19eval[2]=IKsign(((((-100.0)*x936))+(((100.0)*x935))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
IkReal x940=(pp+(((-1.0)*(1.0)*(pz*pz))));
IkReal x941=((0.4)*sj20);
IkReal x942=((0.39)*cj22*sj20);
IkReal x943=((0.39)*sj21*sj22);
IkReal x944=((0.39)*cj20*cj21*sj22);
j19eval[0]=x940;
j19eval[1]=((IKabs((((py*x942))+(((-1.0)*py*x944))+((py*x941))+((px*x943)))))+(IKabs((((px*x941))+((px*x942))+(((-1.0)*py*x943))+(((-1.0)*px*x944))))));
j19eval[2]=IKsign(x940);
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x945=((-1.0)*(((1.0)*pp)));
IkReal x946=((0.39)*cj22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x945);
evalcond[2]=((-0.4)+pz+(((-1.0)*x946)));
evalcond[3]=((-0.0079)+(((0.8)*pz))+x945);
evalcond[4]=((0.4)+(((-1.0)*(1.0)*pz))+x946);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[3];
sj20=0;
cj20=1.0;
j20=0;
IkReal x947=pz*pz;
IkReal x948=(px*sj22);
IkReal x949=(py*sj22);
j19eval[0]=(pp+(((-1.0)*x947)));
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x947))));
j19eval[2]=((IKabs((((cj21*x948))+((sj21*x949)))))+(IKabs(((((-1.0)*cj21*x949))+((sj21*x948))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
sj20=0;
cj20=1.0;
j20=0;
IkReal x950=(cj21*pp);
IkReal x951=(cj21*(pz*pz));
IkReal x952=(cj21*sj21*sj22);
IkReal x953=(sj22*(cj21*cj21));
j19eval[0]=(x950+(((-1.0)*x951)));
j19eval[1]=((IKabs((((px*x953))+((py*x952)))))+(IKabs(((((-1.0)*py*x953))+((px*x952))))));
j19eval[2]=IKsign(((((100.0)*x950))+(((-100.0)*x951))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
sj20=0;
cj20=1.0;
j20=0;
IkReal x954=(cj21*pp);
IkReal x955=(cj21*(pz*pz));
IkReal x956=(py*sj22);
IkReal x957=cj21*cj21;
IkReal x958=(px*sj22);
j19eval[0]=(x955+(((-1.0)*x954)));
j19eval[1]=((IKabs(((((-1.0)*cj21*sj21*x958))+((x956*x957)))))+(IKabs((((cj21*sj21*x956))+((x957*x958))))));
j19eval[2]=IKsign(((((-100.0)*x954))+(((100.0)*x955))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x959=((-1.0)*(((1.0)*pp)));
IkReal x960=((0.39)*cj22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+x959+(((0.312)*cj22)));
evalcond[2]=((-0.4)+pz+(((-1.0)*x960)));
evalcond[3]=((-0.0079)+(((0.8)*pz))+x959);
evalcond[4]=((0.4)+(((-1.0)*(1.0)*pz))+x960);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=1.0;
j20=0;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
IkReal x961=pz*pz;
j19eval[0]=(pp+(((-1.0)*x961)));
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x961))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x962=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x962);
evalcond[2]=((-0.79)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x962);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x964 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
IkReal x963=((-1.0)*(x964.value));
j19array[0]=x963;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x963);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x965=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x965);
evalcond[2]=((-0.01)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x965);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
IkReal x966=((-1.0)*(x967.value));
j19array[0]=x966;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x966);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x968=((39.0)*sj22);
CheckValue<IkReal> x969=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal((px*x968)),((-1.0)*py*x968),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x969.value)))+(x970.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x971=((1.0)*(IKcos(j19)));
IkReal x972=IKsin(j19);
evalcond[0]=((((-1.0)*py*x972))+(((-1.0)*px*x971)));
evalcond[1]=((((-1.0)*py*x971))+(((-1.0)*(0.39)*sj22))+((px*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x973=((-1.0)*(((1.0)*pp)));
IkReal x974=((0.39)*cj22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x973);
evalcond[2]=((-0.4)+(((-1.0)*x974))+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x973);
evalcond[4]=((0.4)+(((-1.0)*(1.0)*pz))+x974);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=1.0;
j20=0;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
IkReal x975=pz*pz;
j19eval[0]=(pp+(((-1.0)*x975)));
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x975))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x976=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x976);
evalcond[2]=((-0.79)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x976);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
IkReal x977=((-1.0)*(x978.value));
j19array[0]=x977;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x977);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x979=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x979);
evalcond[2]=((-0.01)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x979);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
IkReal x980=((-1.0)*(x981.value));
j19array[0]=x980;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x980);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x982=((39.0)*sj22);
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal(((-1.0)*px*x982)),(py*x982),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
CheckValue<IkReal> x984=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x984.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x983.value)+(((1.5707963267949)*(x984.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x985=((1.0)*(IKcos(j19)));
IkReal x986=IKsin(j19);
evalcond[0]=((((-1.0)*px*x985))+(((-1.0)*py*x986)));
evalcond[1]=((((-1.0)*py*x985))+((px*x986))+(((0.39)*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x987=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x987);
evalcond[2]=((-0.79)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x987);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=1.0;
j22=0;
IkReal x988=((1.0)*px);
j19eval[0]=((IKabs(((((-1.0)*cj21*x988))+(((-1.0)*(1.0)*py*sj21)))))+(IKabs((((cj21*py))+(((-1.0)*sj21*x988))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=1.0;
j22=0;
IkReal x989=((1.0)*cj21);
j19eval[0]=((IKabs(((((-1.0)*px*x989))+(((-1.0)*(1.0)*py*sj21)))))+(IKabs((((px*sj21))+(((-1.0)*py*x989))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j19]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x990=((1.0)*cj21);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*py*sj21))+(((-1.0)*px*x990)))),((((-1.0)*py*x990))+((px*sj21))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=((-1.0)*(x992.value));
j19array[0]=x991;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x991);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x993=IKsin(j19);
IkReal x994=(px*x993);
IkReal x995=IKcos(j19);
IkReal x996=((1.0)*x995);
IkReal x997=(px*x996);
IkReal x998=((1.0)*py*x993);
evalcond[0]=((((-1.0)*py*x996))+x994);
evalcond[1]=((((-1.0)*x998))+(((-1.0)*x997)));
evalcond[2]=((((-1.0)*sj21*x998))+((cj21*py*x995))+(((-1.0)*sj21*x997))+(((-1.0)*cj21*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x999=((1.0)*px);
CheckValue<IkReal> x1001 = IKatan2WithCheck(IkReal(((((-1.0)*sj21*x999))+((cj21*py)))),((((-1.0)*(1.0)*py*sj21))+(((-1.0)*cj21*x999))),IKFAST_ATAN2_MAGTHRESH);
if(!x1001.valid){
continue;
}
IkReal x1000=((-1.0)*(x1001.value));
j19array[0]=x1000;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1000);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1002=IKsin(j19);
IkReal x1003=(px*x1002);
IkReal x1004=((1.0)*(IKcos(j19)));
IkReal x1005=(py*x1004);
IkReal x1006=(px*x1004);
IkReal x1007=((1.0)*py*x1002);
evalcond[0]=((((-1.0)*x1005))+x1003);
evalcond[1]=((((-1.0)*x1006))+(((-1.0)*x1007)));
evalcond[2]=((((-1.0)*sj21*x1005))+((sj21*x1003))+(((-1.0)*cj21*x1007))+(((-1.0)*cj21*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
IkReal x1008=((-1.0)*(x1009.value));
j19array[0]=x1008;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1008);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1010=IKcos(j19);
IkReal x1011=((1.0)*px);
IkReal x1012=(x1010*x1011);
IkReal x1013=IKsin(j19);
IkReal x1014=((1.0)*py*x1013);
IkReal x1015=(py*x1010);
evalcond[0]=((((-1.0)*x1014))+(((-1.0)*x1012)));
evalcond[1]=((((-1.0)*sj21*x1014))+((cj21*x1015))+(((-1.0)*cj21*x1011*x1013))+(((-1.0)*sj21*x1012)));
evalcond[2]=((((-1.0)*cj21*x1014))+(((-1.0)*sj21*x1015))+(((-1.0)*cj21*x1012))+((px*sj21*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1016=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1016);
evalcond[2]=((-0.01)+pz);
evalcond[3]=((-0.0079)+(((0.8)*pz))+x1016);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
IkReal x1017=((1.0)*px);
j19eval[0]=((IKabs(((((-1.0)*cj21*x1017))+(((-1.0)*(1.0)*py*sj21)))))+(IKabs((((cj21*py))+(((-1.0)*sj21*x1017))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=1.0;
j20=0;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
IkReal x1018=((1.0)*cj21);
j19eval[0]=((IKabs((((px*sj21))+(((-1.0)*py*x1018)))))+(IKabs(((((-1.0)*(1.0)*py*sj21))+(((-1.0)*px*x1018))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j19]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x1019=((1.0)*cj21);
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1019))+(((-1.0)*(1.0)*py*sj21)))),((((-1.0)*py*x1019))+((px*sj21))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
IkReal x1020=((-1.0)*(x1021.value));
j19array[0]=x1020;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1020);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1022=IKsin(j19);
IkReal x1023=(px*x1022);
IkReal x1024=IKcos(j19);
IkReal x1025=((1.0)*x1024);
IkReal x1026=(px*x1025);
IkReal x1027=((1.0)*py*x1022);
evalcond[0]=((((-1.0)*py*x1025))+x1023);
evalcond[1]=((((-1.0)*x1027))+(((-1.0)*x1026)));
evalcond[2]=(((cj21*py*x1024))+(((-1.0)*cj21*x1023))+(((-1.0)*sj21*x1027))+(((-1.0)*sj21*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x1028=((1.0)*px);
CheckValue<IkReal> x1030 = IKatan2WithCheck(IkReal((((cj21*py))+(((-1.0)*sj21*x1028)))),((((-1.0)*(1.0)*py*sj21))+(((-1.0)*cj21*x1028))),IKFAST_ATAN2_MAGTHRESH);
if(!x1030.valid){
continue;
}
IkReal x1029=((-1.0)*(x1030.value));
j19array[0]=x1029;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1029);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1031=IKsin(j19);
IkReal x1032=(px*x1031);
IkReal x1033=((1.0)*(IKcos(j19)));
IkReal x1034=(py*x1033);
IkReal x1035=(px*x1033);
IkReal x1036=((1.0)*py*x1031);
evalcond[0]=(x1032+(((-1.0)*x1034)));
evalcond[1]=((((-1.0)*x1036))+(((-1.0)*x1035)));
evalcond[2]=((((-1.0)*sj21*x1034))+((sj21*x1032))+(((-1.0)*cj21*x1036))+(((-1.0)*cj21*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1038 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
IkReal x1037=((-1.0)*(x1038.value));
j19array[0]=x1037;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1037);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1039=IKcos(j19);
IkReal x1040=((1.0)*px);
IkReal x1041=(x1039*x1040);
IkReal x1042=IKsin(j19);
IkReal x1043=((1.0)*py*x1042);
IkReal x1044=(py*x1039);
evalcond[0]=((((-1.0)*x1041))+(((-1.0)*x1043)));
evalcond[1]=((((-1.0)*sj21*x1041))+(((-1.0)*sj21*x1043))+(((-1.0)*cj21*x1040*x1042))+((cj21*x1044)));
evalcond[2]=((((-1.0)*cj21*x1041))+(((-1.0)*sj21*x1044))+((px*sj21*x1042))+(((-1.0)*cj21*x1043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1045=((100.0)*cj21);
IkReal x1046=((39.0)*cj21*sj21*sj22);
IkReal x1047=((39.0)*sj22*(cj21*cj21));
CheckValue<IkReal> x1048 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1046))+((py*x1047)))),(((px*x1047))+((py*x1046))),IKFAST_ATAN2_MAGTHRESH);
if(!x1048.valid){
continue;
}
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1045))+((x1045*(pz*pz))))),-1);
if(!x1049.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1048.value)+(((1.5707963267949)*(x1049.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1050=IKsin(j19);
IkReal x1051=(px*x1050);
IkReal x1052=((0.39)*sj22);
IkReal x1053=IKcos(j19);
IkReal x1054=((1.0)*x1053);
IkReal x1055=(py*x1054);
IkReal x1056=(px*x1054);
IkReal x1057=((1.0)*py*x1050);
evalcond[0]=((((-1.0)*sj21*x1052))+x1051+(((-1.0)*x1055)));
evalcond[1]=((((-1.0)*cj21*x1052))+(((-1.0)*x1056))+(((-1.0)*x1057)));
evalcond[2]=(((cj21*py*x1053))+(((-1.0)*sj21*x1056))+(((-1.0)*sj21*x1057))+(((-1.0)*cj21*x1051)));
evalcond[3]=((((-1.0)*x1052))+(((-1.0)*sj21*x1055))+(((-1.0)*cj21*x1056))+((sj21*x1051))+(((-1.0)*cj21*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1058=((100.0)*cj21);
IkReal x1059=((39.0)*cj21*sj21*sj22);
IkReal x1060=((39.0)*sj22*(cj21*cj21));
CheckValue<IkReal> x1061=IKPowWithIntegerCheck(IKsign((((pp*x1058))+(((-1.0)*x1058*(pz*pz))))),-1);
if(!x1061.valid){
continue;
}
CheckValue<IkReal> x1062 = IKatan2WithCheck(IkReal((((px*x1059))+(((-1.0)*py*x1060)))),((((-1.0)*px*x1060))+(((-1.0)*py*x1059))),IKFAST_ATAN2_MAGTHRESH);
if(!x1062.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1061.value)))+(x1062.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1063=IKsin(j19);
IkReal x1064=(px*x1063);
IkReal x1065=((0.39)*sj22);
IkReal x1066=IKcos(j19);
IkReal x1067=((1.0)*x1066);
IkReal x1068=(py*x1067);
IkReal x1069=(px*x1067);
IkReal x1070=((1.0)*py*x1063);
evalcond[0]=((((-1.0)*x1068))+x1064+(((-1.0)*sj21*x1065)));
evalcond[1]=((((-1.0)*cj21*x1065))+(((-1.0)*x1069))+(((-1.0)*x1070)));
evalcond[2]=((((-1.0)*sj21*x1070))+((cj21*py*x1066))+(((-1.0)*sj21*x1069))+(((-1.0)*cj21*x1064)));
evalcond[3]=((((-1.0)*cj21*x1069))+((sj21*x1064))+(((-1.0)*x1065))+(((-1.0)*sj21*x1068))+(((-1.0)*cj21*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1071=((39.0)*cj21*sj22);
IkReal x1072=((39.0)*sj21*sj22);
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1071))+((px*x1072)))),((((-1.0)*py*x1072))+(((-1.0)*px*x1071))),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
CheckValue<IkReal> x1074=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1074.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1073.value)+(((1.5707963267949)*(x1074.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1075=IKsin(j19);
IkReal x1076=(px*x1075);
IkReal x1077=((0.39)*sj22);
IkReal x1078=IKcos(j19);
IkReal x1079=((1.0)*x1078);
IkReal x1080=(py*x1079);
IkReal x1081=(px*x1079);
IkReal x1082=((1.0)*py*x1075);
evalcond[0]=(x1076+(((-1.0)*sj21*x1077))+(((-1.0)*x1080)));
evalcond[1]=((((-1.0)*cj21*x1077))+(((-1.0)*x1082))+(((-1.0)*x1081)));
evalcond[2]=((((-1.0)*cj21*x1076))+(((-1.0)*sj21*x1082))+(((-1.0)*sj21*x1081))+((cj21*py*x1078)));
evalcond[3]=(((sj21*x1076))+(((-1.0)*cj21*x1082))+(((-1.0)*sj21*x1080))+(((-1.0)*x1077))+(((-1.0)*cj21*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1083=((-1.0)*(((1.0)*pp)));
IkReal x1084=((0.4)+pz+(((0.39)*cj22)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x1083);
evalcond[2]=x1084;
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1083);
evalcond[4]=x1084;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[3];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
IkReal x1085=pz*pz;
IkReal x1086=(cj21*sj22);
IkReal x1087=(sj21*sj22);
j19eval[0]=(pp+(((-1.0)*x1085)));
j19eval[1]=((IKabs(((((-1.0)*py*x1087))+((px*x1086)))))+(IKabs((((py*x1086))+((px*x1087))))));
j19eval[2]=IKsign(((((100.0)*pp))+(((-100.0)*x1085))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
IkReal x1088=(cj21*pp);
IkReal x1089=(cj21*(pz*pz));
IkReal x1090=(px*sj22);
IkReal x1091=cj21*cj21;
IkReal x1092=(py*sj22);
j19eval[0]=((((-1.0)*x1089))+x1088);
j19eval[1]=((IKabs(((((-1.0)*cj21*sj21*x1092))+((x1090*x1091)))))+(IKabs((((x1091*x1092))+((cj21*sj21*x1090))))));
j19eval[2]=IKsign(((((-100.0)*x1089))+(((100.0)*x1088))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
IkReal x1093=(pp*sj21);
IkReal x1094=(sj21*(pz*pz));
IkReal x1095=(px*sj22);
IkReal x1096=(cj21*sj21);
IkReal x1097=(py*sj22);
IkReal x1098=cj21*cj21;
j19eval[0]=((((-1.0)*x1094))+x1093);
j19eval[1]=IKsign(((((100.0)*x1093))+(((-100.0)*x1094))));
j19eval[2]=((IKabs((((x1096*x1097))+(((-1.0)*x1095*x1098))+x1095)))+(IKabs((((x1095*x1096))+((x1097*x1098))+(((-1.0)*x1097))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1099=((-1.0)*(((1.0)*pp)));
IkReal x1100=x1084;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x1099);
evalcond[2]=x1100;
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1099);
evalcond[4]=x1100;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=1.0;
j21=0;
IkReal x1101=pz*pz;
j19eval[0]=((((-1.0)*x1101))+pp);
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x1101))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1102=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x1102);
evalcond[2]=((0.79)+pz);
evalcond[3]=((-0.0079)+x1102+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=1.0;
j21=0;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1104 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1104.valid){
continue;
}
IkReal x1103=((-1.0)*(x1104.value));
j19array[0]=x1103;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1103);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1105=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1105);
evalcond[2]=((0.01)+pz);
evalcond[3]=((-0.0079)+x1105+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=1.0;
j21=0;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1107 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1107.valid){
continue;
}
IkReal x1106=((-1.0)*(x1107.value));
j19array[0]=x1106;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1106);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1108=((39.0)*sj22);
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal((py*x1108)),(px*x1108),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1110.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1109.value)+(((1.5707963267949)*(x1110.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x1111=IKsin(j19);
IkReal x1112=((1.0)*(IKcos(j19)));
evalcond[0]=(((px*x1111))+(((-1.0)*py*x1112)));
evalcond[1]=((((-1.0)*px*x1112))+(((-1.0)*py*x1111))+(((0.39)*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1113=((-1.0)*(((1.0)*pp)));
IkReal x1114=x1084;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x1113);
evalcond[2]=x1114;
evalcond[3]=((-0.0079)+x1113+(((-1.0)*(0.8)*pz)));
evalcond[4]=x1114;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x1115=pz*pz;
j19eval[0]=((((-1.0)*x1115))+pp);
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x1115))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1116=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x1116);
evalcond[2]=((0.79)+pz);
evalcond[3]=((-0.0079)+x1116+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1118 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1118.valid){
continue;
}
IkReal x1117=((-1.0)*(x1118.value));
j19array[0]=x1117;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1117);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1119=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1119);
evalcond[2]=((0.01)+pz);
evalcond[3]=((-0.0079)+x1119+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1121 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1121.valid){
continue;
}
IkReal x1120=((-1.0)*(x1121.value));
j19array[0]=x1120;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1120);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1122=((39.0)*sj22);
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal(((-1.0)*py*x1122)),((-1.0)*px*x1122),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1124.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x1125=IKsin(j19);
IkReal x1126=((1.0)*(IKcos(j19)));
evalcond[0]=((((-1.0)*py*x1126))+((px*x1125)));
evalcond[1]=((((-1.0)*(0.39)*sj22))+(((-1.0)*py*x1125))+(((-1.0)*px*x1126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1127=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x1127);
evalcond[2]=((0.79)+pz);
evalcond[3]=((-0.0079)+x1127+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs((((py*sj21))+(((-1.0)*(1.0)*cj21*px)))))+(IKabs((((cj21*py))+((px*sj21))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs((((cj21*py))+((px*sj21)))))+(IKabs((((cj21*px))+(((-1.0)*(1.0)*py*sj21))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j19]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1129 = IKatan2WithCheck(IkReal((((cj21*px))+(((-1.0)*(1.0)*py*sj21)))),(((cj21*py))+((px*sj21))),IKFAST_ATAN2_MAGTHRESH);
if(!x1129.valid){
continue;
}
IkReal x1128=((-1.0)*(x1129.value));
j19array[0]=x1128;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1128);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1130=IKsin(j19);
IkReal x1131=(px*x1130);
IkReal x1132=IKcos(j19);
IkReal x1133=((1.0)*x1132);
IkReal x1134=(py*x1130);
evalcond[0]=((((-1.0)*py*x1133))+x1131);
evalcond[1]=((((-1.0)*px*x1133))+(((-1.0)*x1134)));
evalcond[2]=(((px*sj21*x1132))+(((-1.0)*cj21*x1131))+((sj21*x1134))+((cj21*py*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal((((cj21*py))+((px*sj21)))),(((py*sj21))+(((-1.0)*(1.0)*cj21*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
IkReal x1135=((-1.0)*(x1136.value));
j19array[0]=x1135;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1135);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1137=IKsin(j19);
IkReal x1138=(px*x1137);
IkReal x1139=IKcos(j19);
IkReal x1140=((1.0)*x1139);
IkReal x1141=(py*x1140);
IkReal x1142=(py*x1137);
evalcond[0]=(x1138+(((-1.0)*x1141)));
evalcond[1]=((((-1.0)*px*x1140))+(((-1.0)*x1142)));
evalcond[2]=((((-1.0)*sj21*x1141))+((cj21*px*x1139))+((cj21*x1142))+((sj21*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1144 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1144.valid){
continue;
}
IkReal x1143=((-1.0)*(x1144.value));
j19array[0]=x1143;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1143);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1145=IKcos(j19);
IkReal x1146=(px*x1145);
IkReal x1147=IKsin(j19);
IkReal x1148=(py*x1147);
IkReal x1149=(py*x1145);
IkReal x1150=(px*x1147);
evalcond[0]=((((-1.0)*x1148))+(((-1.0)*x1146)));
evalcond[1]=(((sj21*x1146))+(((-1.0)*cj21*x1150))+((cj21*x1149))+((sj21*x1148)));
evalcond[2]=(((cj21*x1148))+(((-1.0)*sj21*x1149))+((cj21*x1146))+((sj21*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1151=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1151);
evalcond[2]=((0.01)+pz);
evalcond[3]=((-0.0079)+x1151+(((-1.0)*(0.8)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs((((py*sj21))+(((-1.0)*(1.0)*cj21*px)))))+(IKabs((((cj21*py))+((px*sj21))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs((((cj21*py))+((px*sj21)))))+(IKabs((((cj21*px))+(((-1.0)*(1.0)*py*sj21))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j19]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal((((cj21*px))+(((-1.0)*(1.0)*py*sj21)))),(((cj21*py))+((px*sj21))),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
IkReal x1152=((-1.0)*(x1153.value));
j19array[0]=x1152;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1152);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1154=IKsin(j19);
IkReal x1155=(px*x1154);
IkReal x1156=IKcos(j19);
IkReal x1157=((1.0)*x1156);
IkReal x1158=(py*x1154);
evalcond[0]=(x1155+(((-1.0)*py*x1157)));
evalcond[1]=((((-1.0)*px*x1157))+(((-1.0)*x1158)));
evalcond[2]=(((cj21*py*x1156))+(((-1.0)*cj21*x1155))+((sj21*x1158))+((px*sj21*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal((((cj21*py))+((px*sj21)))),(((py*sj21))+(((-1.0)*(1.0)*cj21*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
IkReal x1159=((-1.0)*(x1160.value));
j19array[0]=x1159;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1159);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1161=IKsin(j19);
IkReal x1162=(px*x1161);
IkReal x1163=IKcos(j19);
IkReal x1164=((1.0)*x1163);
IkReal x1165=(py*x1164);
IkReal x1166=(py*x1161);
evalcond[0]=(x1162+(((-1.0)*x1165)));
evalcond[1]=((((-1.0)*px*x1164))+(((-1.0)*x1166)));
evalcond[2]=(((sj21*x1162))+((cj21*x1166))+(((-1.0)*sj21*x1165))+((cj21*px*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
IkReal x1167=((-1.0)*(x1168.value));
j19array[0]=x1167;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1167);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x1169=IKcos(j19);
IkReal x1170=(px*x1169);
IkReal x1171=IKsin(j19);
IkReal x1172=(py*x1171);
IkReal x1173=(py*x1169);
IkReal x1174=(px*x1171);
evalcond[0]=((((-1.0)*x1172))+(((-1.0)*x1170)));
evalcond[1]=(((cj21*x1173))+((sj21*x1172))+((sj21*x1170))+(((-1.0)*cj21*x1174)));
evalcond[2]=(((cj21*x1172))+(((-1.0)*sj21*x1173))+((sj21*x1174))+((cj21*x1170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1175=((-1.0)*(((1.0)*pp)));
IkReal x1176=x1084;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x1175);
evalcond[2]=x1176;
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1175);
evalcond[4]=x1176;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
IkReal x1177=pz*pz;
j19eval[0]=(pp+(((-1.0)*x1177)));
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x1177))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1178=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x1178);
evalcond[2]=((0.79)+pz);
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1178);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1179=((-1.0)*(x1180.value));
j19array[0]=x1179;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1179);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1181=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1181);
evalcond[2]=((0.01)+pz);
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1181);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=1.0;
cj21=0;
j21=1.5707963267949;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
IkReal x1182=((-1.0)*(x1183.value));
j19array[0]=x1182;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1182);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1184=((39.0)*sj22);
CheckValue<IkReal> x1185=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1185.valid){
continue;
}
CheckValue<IkReal> x1186 = IKatan2WithCheck(IkReal((px*x1184)),((-1.0)*py*x1184),IKFAST_ATAN2_MAGTHRESH);
if(!x1186.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1185.value)))+(x1186.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x1187=((1.0)*(IKcos(j19)));
IkReal x1188=IKsin(j19);
evalcond[0]=((((-1.0)*py*x1188))+(((-1.0)*px*x1187)));
evalcond[1]=((((-1.0)*(0.39)*sj22))+(((-1.0)*py*x1187))+((px*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1189=((-1.0)*(((1.0)*pp)));
IkReal x1190=x1084;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+x1189);
evalcond[2]=x1190;
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1189);
evalcond[4]=x1190;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[4];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
IkReal x1191=pz*pz;
j19eval[0]=((((-1.0)*x1191))+pp);
j19eval[1]=IKsign(((((100.0)*pp))+(((-100.0)*x1191))));
j19eval[2]=1521.0;
j19eval[3]=sj22;
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  || IKabs(j19eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1192=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
evalcond[1]=((0.6241)+x1192);
evalcond[2]=((0.79)+pz);
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1192);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
sj22=0;
cj22=1.0;
j22=0;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
IkReal x1193=((-1.0)*(x1194.value));
j19array[0]=x1193;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1193);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1195=((-1.0)*(((1.0)*pp)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
evalcond[1]=((0.0001)+x1195);
evalcond[2]=((0.01)+pz);
evalcond[3]=((-0.0079)+(((-1.0)*(0.8)*pz))+x1195);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19eval[1];
sj20=0;
cj20=-1.0;
j20=3.14159265358979;
sj21=-1.0;
cj21=0;
j21=-1.5707963267949;
sj22=0;
cj22=-1.0;
j22=3.14159265358979;
j19eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
IkReal x1196=((-1.0)*(x1197.value));
j19array[0]=x1196;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1196);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*px*(IKcos(j19))))+(((-1.0)*(1.0)*py*(IKsin(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1198=((39.0)*sj22);
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal(((-1.0)*px*x1198)),(py*x1198),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1200.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1199.value)+(((1.5707963267949)*(x1200.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x1201=((1.0)*(IKcos(j19)));
IkReal x1202=IKsin(j19);
evalcond[0]=((((-1.0)*py*x1202))+(((-1.0)*px*x1201)));
evalcond[1]=((((-1.0)*py*x1201))+((px*x1202))+(((0.39)*sj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1203=((100.0)*sj21);
IkReal x1204=((39.0)*sj22);
IkReal x1205=(px*x1204);
IkReal x1206=(cj21*sj21);
IkReal x1207=(py*x1204);
IkReal x1208=cj21*cj21;
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(IKsign((((pp*x1203))+(((-1.0)*x1203*(pz*pz))))),-1);
if(!x1209.valid){
continue;
}
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal((x1205+(((-1.0)*x1205*x1208))+((x1206*x1207)))),(((x1205*x1206))+(((-1.0)*x1207))+((x1207*x1208))),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1209.value)))+(x1210.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1211=IKsin(j19);
IkReal x1212=(px*x1211);
IkReal x1213=((0.39)*sj22);
IkReal x1214=IKcos(j19);
IkReal x1215=((1.0)*x1214);
IkReal x1216=(py*x1215);
IkReal x1217=(py*x1211);
IkReal x1218=(cj21*x1214);
evalcond[0]=((((-1.0)*x1216))+x1212+(((-1.0)*sj21*x1213)));
evalcond[1]=((((-1.0)*x1217))+((cj21*x1213))+(((-1.0)*px*x1215)));
evalcond[2]=((((-1.0)*cj21*x1212))+((sj21*x1217))+((px*sj21*x1214))+((py*x1218)));
evalcond[3]=(((px*x1218))+((sj21*x1212))+(((-1.0)*x1213))+((cj21*x1217))+(((-1.0)*sj21*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1219=((100.0)*cj21);
IkReal x1220=((39.0)*cj21*sj21*sj22);
IkReal x1221=((39.0)*sj22*(cj21*cj21));
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1219*(pz*pz)))+((pp*x1219)))),-1);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal((((px*x1220))+((py*x1221)))),((((-1.0)*py*x1220))+((px*x1221))),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1222.value)))+(x1223.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1224=IKsin(j19);
IkReal x1225=(px*x1224);
IkReal x1226=((0.39)*sj22);
IkReal x1227=IKcos(j19);
IkReal x1228=((1.0)*x1227);
IkReal x1229=(py*x1228);
IkReal x1230=(py*x1224);
IkReal x1231=(cj21*x1227);
evalcond[0]=((((-1.0)*sj21*x1226))+(((-1.0)*x1229))+x1225);
evalcond[1]=(((cj21*x1226))+(((-1.0)*px*x1228))+(((-1.0)*x1230)));
evalcond[2]=((((-1.0)*cj21*x1225))+((px*sj21*x1227))+((sj21*x1230))+((py*x1231)));
evalcond[3]=(((px*x1231))+(((-1.0)*x1226))+(((-1.0)*sj21*x1229))+((cj21*x1230))+((sj21*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1232=((39.0)*cj21*sj22);
IkReal x1233=((39.0)*sj21*sj22);
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal((((px*x1233))+((py*x1232)))),((((-1.0)*py*x1233))+((px*x1232))),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(IKsign(((((100.0)*pp))+(((-1.0)*(100.0)*(pz*pz))))),-1);
if(!x1235.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1234.value)+(((1.5707963267949)*(x1235.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1236=IKsin(j19);
IkReal x1237=(px*x1236);
IkReal x1238=((0.39)*sj22);
IkReal x1239=IKcos(j19);
IkReal x1240=((1.0)*x1239);
IkReal x1241=(py*x1240);
IkReal x1242=(py*x1236);
IkReal x1243=(cj21*x1239);
evalcond[0]=((((-1.0)*sj21*x1238))+x1237+(((-1.0)*x1241)));
evalcond[1]=((((-1.0)*x1242))+(((-1.0)*px*x1240))+((cj21*x1238)));
evalcond[2]=((((-1.0)*cj21*x1237))+((sj21*x1242))+((px*sj21*x1239))+((py*x1243)));
evalcond[3]=((((-1.0)*x1238))+((cj21*x1242))+((px*x1243))+((sj21*x1237))+(((-1.0)*sj21*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1244=((0.4)*sj20);
IkReal x1245=((0.39)*cj22*sj20);
IkReal x1246=((0.39)*sj21*sj22);
IkReal x1247=((0.39)*cj20*cj21*sj22);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal((((py*x1244))+((py*x1245))+((px*x1246))+(((-1.0)*py*x1247)))),((((-1.0)*py*x1246))+((px*x1244))+((px*x1245))+(((-1.0)*px*x1247))),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x1249.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1248.value)+(((1.5707963267949)*(x1249.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j19);
IkReal x1251=(px*x1250);
IkReal x1252=((0.39)*sj22);
IkReal x1253=IKcos(j19);
IkReal x1254=((1.0)*x1253);
IkReal x1255=(py*x1254);
IkReal x1256=(cj20*pz);
IkReal x1257=((0.8)*sj20);
IkReal x1258=(py*x1250);
IkReal x1259=((0.39)*cj22);
IkReal x1260=(px*x1254);
IkReal x1261=((1.0)*x1258);
IkReal x1262=(cj20*cj21);
IkReal x1263=(pz*sj20);
IkReal x1264=(cj20*sj21);
evalcond[0]=((((-1.0)*sj21*x1252))+x1251+(((-1.0)*x1255)));
evalcond[1]=((-0.0079)+((x1257*x1258))+(((0.8)*x1256))+((px*x1253*x1257))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+(((-1.0)*sj20*x1260))+x1259+(((-1.0)*sj20*x1261))+(((-1.0)*x1256)));
evalcond[3]=((((-1.0)*x1260))+(((-1.0)*x1261))+(((0.4)*sj20))+((sj20*x1259))+(((-1.0)*x1252*x1262)));
evalcond[4]=((((-1.0)*cj21*x1251))+(((-1.0)*x1260*x1264))+(((-1.0)*x1261*x1264))+((cj21*py*x1253))+((sj21*x1263)));
evalcond[5]=((((-1.0)*x1260*x1262))+(((-1.0)*x1252))+(((-1.0)*x1261*x1262))+(((-1.0)*sj21*x1255))+((sj21*x1251))+((cj21*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1265=((100.0)*sj20);
IkReal x1266=((125.0)*pp);
IkReal x1267=((100.0)*cj20*pz);
IkReal x1268=((39.0)*sj20*sj21*sj22);
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign((((pp*x1265))+(((-1.0)*x1265*(pz*pz))))),-1);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal((((py*x1266))+(((0.9875)*py))+(((-1.0)*py*x1267))+((px*x1268)))),(((px*x1266))+(((0.9875)*px))+(((-1.0)*px*x1267))+(((-1.0)*py*x1268))),IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1269.value)))+(x1270.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x1271=IKsin(j19);
IkReal x1272=(px*x1271);
IkReal x1273=((0.39)*sj22);
IkReal x1274=IKcos(j19);
IkReal x1275=((1.0)*x1274);
IkReal x1276=(py*x1275);
IkReal x1277=(cj20*pz);
IkReal x1278=((0.8)*sj20);
IkReal x1279=(py*x1271);
IkReal x1280=((0.39)*cj22);
IkReal x1281=(px*x1275);
IkReal x1282=((1.0)*x1279);
IkReal x1283=(cj20*cj21);
IkReal x1284=(pz*sj20);
IkReal x1285=(cj20*sj21);
evalcond[0]=((((-1.0)*sj21*x1273))+(((-1.0)*x1276))+x1272);
evalcond[1]=((-0.0079)+((px*x1274*x1278))+((x1278*x1279))+(((-1.0)*(1.0)*pp))+(((0.8)*x1277)));
evalcond[2]=((0.4)+(((-1.0)*sj20*x1282))+x1280+(((-1.0)*sj20*x1281))+(((-1.0)*x1277)));
evalcond[3]=((((-1.0)*x1282))+(((0.4)*sj20))+((sj20*x1280))+(((-1.0)*x1281))+(((-1.0)*x1273*x1283)));
evalcond[4]=((((-1.0)*x1281*x1285))+((cj21*py*x1274))+(((-1.0)*x1282*x1285))+(((-1.0)*cj21*x1272))+((sj21*x1284)));
evalcond[5]=(((cj21*x1284))+(((-1.0)*x1282*x1283))+(((-1.0)*x1273))+((sj21*x1272))+(((-1.0)*sj21*x1276))+(((-1.0)*x1281*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1286=((0.39)*cj22);
IkReal x1287=((1.0)*cj20*pz);
IkReal x1288=((0.39)*sj20*sj21*sj22);
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*sj20*(pz*pz)))+((pp*sj20)))),-1);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1287))+((py*x1286))+(((0.4)*py))+((px*x1288)))),(((px*x1286))+(((-1.0)*px*x1287))+(((-1.0)*py*x1288))+(((0.4)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1289.value)))+(x1290.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x1291=IKsin(j19);
IkReal x1292=(px*x1291);
IkReal x1293=((0.39)*sj22);
IkReal x1294=IKcos(j19);
IkReal x1295=((1.0)*x1294);
IkReal x1296=(py*x1295);
IkReal x1297=(cj20*pz);
IkReal x1298=((0.8)*sj20);
IkReal x1299=(py*x1291);
IkReal x1300=((0.39)*cj22);
IkReal x1301=(px*x1295);
IkReal x1302=((1.0)*x1299);
IkReal x1303=(cj20*cj21);
IkReal x1304=(pz*sj20);
IkReal x1305=(cj20*sj21);
evalcond[0]=(x1292+(((-1.0)*sj21*x1293))+(((-1.0)*x1296)));
evalcond[1]=((-0.0079)+(((0.8)*x1297))+((x1298*x1299))+((px*x1294*x1298))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+(((-1.0)*x1297))+x1300+(((-1.0)*sj20*x1302))+(((-1.0)*sj20*x1301)));
evalcond[3]=((((0.4)*sj20))+(((-1.0)*x1302))+(((-1.0)*x1293*x1303))+((sj20*x1300))+(((-1.0)*x1301)));
evalcond[4]=((((-1.0)*x1301*x1305))+(((-1.0)*x1302*x1305))+((cj21*py*x1294))+((sj21*x1304))+(((-1.0)*cj21*x1292)));
evalcond[5]=((((-1.0)*x1301*x1303))+(((-1.0)*sj21*x1296))+((cj21*x1304))+((sj21*x1292))+(((-1.0)*x1302*x1303))+(((-1.0)*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1308 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1308.valid){
continue;
}
IkReal x1306=((-1.0)*(x1308.value));
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x1309=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x1309.valid){
continue;
}
if( (((0.39)*sj21*sj22*(x1309.value))) < -1-IKFAST_SINCOS_THRESH || (((0.39)*sj21*sj22*(x1309.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1307=IKasin(((0.39)*sj21*sj22*(x1309.value)));
j19array[0]=(x1306+x1307);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+x1306+(((-1.0)*x1307)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j20eval[3];
IkReal x1310=(cj19*px);
IkReal x1311=(py*sj19);
IkReal x1312=(cj21*sj22);
IkReal x1313=(pz*x1312);
IkReal x1314=(cj19*cj22*px);
IkReal x1315=(cj22*py*sj19);
IkReal x1316=((100.0)*pz);
j20eval[0]=((((-1.02564102564103)*x1310))+(((-1.02564102564103)*x1311))+(((-1.0)*x1315))+(((-1.0)*x1314))+x1313);
j20eval[1]=((IKabs(((-16.0)+(((100.0)*(pz*pz)))+(((-1.0)*(31.2)*cj22))+(((-1.0)*(15.21)*(cj22*cj22))))))+(IKabs(((((15.21)*cj22*x1312))+(((15.6)*x1312))+(((-1.0)*x1311*x1316))+(((-1.0)*x1310*x1316))))));
j20eval[2]=IKsign(((((-39.0)*x1315))+(((-40.0)*x1311))+(((-40.0)*x1310))+(((39.0)*x1313))+(((-39.0)*x1314))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
IkReal x1317=cj21*cj21;
IkReal x1318=cj22*cj22;
IkReal x1319=((3900.0)*cj22);
IkReal x1320=(cj19*px);
IkReal x1321=((3900.0)*cj21*sj22);
IkReal x1322=(py*sj19);
IkReal x1323=((1521.0)*x1317);
j20eval[0]=((1.05193951347797)+(((2.05128205128205)*cj22))+(((-1.0)*x1317*x1318))+x1318+x1317);
j20eval[1]=((IKabs((((pz*x1319))+(((-1.0)*x1320*x1321))+(((4000.0)*pz))+(((-1.0)*x1321*x1322)))))+(IKabs(((((4000.0)*x1320))+((x1319*x1322))+((pz*x1321))+((x1319*x1320))+(((4000.0)*x1322))))));
j20eval[2]=IKsign(((1600.0)+x1323+(((3120.0)*cj22))+(((1521.0)*x1318))+(((-1.0)*x1318*x1323))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
IkReal x1324=(pz*sj21);
IkReal x1325=(cj22*pz*sj21);
IkReal x1326=(cj19*cj21*px*sj21*sj22);
IkReal x1327=(cj21*py*sj19*sj21*sj22);
j20eval[0]=((((-1.0)*x1325))+(((-1.02564102564103)*x1324))+(((-1.0)*x1326))+(((-1.0)*x1327)));
j20eval[1]=IKsign(((((-39.0)*x1325))+(((-39.0)*x1327))+(((-40.0)*x1324))+(((-39.0)*x1326))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1328=(px*sj19);
IkReal x1329=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+(((-1.0)*(1.0)*pp)));
evalcond[2]=(x1328+(((-1.0)*x1329)));
evalcond[3]=(x1329+(((-1.0)*x1328)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x1330=(cj19*px);
IkReal x1331=(py*sj19);
IkReal x1332=(pz*sj22);
IkReal x1333=(cj19*pp*px);
IkReal x1334=(pp*py*sj19);
IkReal x1335=((100.0)*pz);
j20eval[0]=((((126.582278481013)*x1333))+x1330+x1331+(((126.582278481013)*x1334))+(((-39.4936708860759)*x1332)));
j20eval[1]=((IKabs(((((-1.0)*(15.21)*cj22*sj22))+(((-1.0)*(15.6)*sj22))+((x1331*x1335))+((x1330*x1335)))))+(IKabs(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp))))));
j20eval[2]=IKsign(((((0.9875)*x1330))+(((125.0)*x1334))+(((0.9875)*x1331))+(((-39.0)*x1332))+(((125.0)*x1333))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x1336=(cj22*pp);
IkReal x1337=cj22*cj22;
IkReal x1338=((3900.0)*pz);
IkReal x1339=((3900.0)*sj22);
IkReal x1340=(cj19*px);
IkReal x1341=(py*sj19);
IkReal x1342=((12500.0)*pp);
j20eval[0]=((-40.519311911717)+(((-126.582278481013)*x1336))+(((-1.0)*(129.827977929244)*pp))+(((39.4936708860759)*x1337))+(((-1.0)*(1.0)*cj22)));
j20eval[1]=((IKabs(((((-1.0)*cj22*x1338))+((x1339*x1340))+((x1339*x1341))+(((-1.0)*(4000.0)*pz)))))+(IKabs(((((-1.0)*sj22*x1338))+(((-1.0)*x1341*x1342))+(((-98.75)*x1340))+(((-1.0)*x1340*x1342))+(((-98.75)*x1341))))));
j20eval[2]=IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((1521.0)*x1337))+(((-4875.0)*x1336))+(((-1.0)*(5000.0)*pp))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
sj21=0;
cj21=1.0;
j21=0;
IkReal x1343=((39.4936708860759)*sj22);
j20eval[0]=((((-1.0)*(126.582278481013)*pp*pz))+(((-1.0)*(1.0)*pz))+(((-1.0)*py*sj19*x1343))+(((-1.0)*cj19*px*x1343)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst0=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1344=(px*sj19);
IkReal x1345=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst0))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst0))+(((-1.0)*(1.0)*pp)));
evalcond[2]=(x1344+(((-1.0)*x1345)));
evalcond[3]=((((-1.0)*x1344))+x1345);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1346=(cj19*px);
IkReal x1347=(py*sj19);
IkReal x1348=((0.39)*gconst0);
IkReal x1349=gconst0*gconst0;
if((((1.0)+(((-1.0)*x1349)))) < -0.00001)
continue;
IkReal x1350=IKsqrt(((1.0)+(((-1.0)*x1349))));
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1349))+(((0.312)*gconst0))+(((-1.0)*(1.0)*(pz*pz))))),(((pz*x1347))+(((-0.1521)*gconst0*x1350))+((pz*x1346))+(((-0.156)*x1350))),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(IKsign((((x1347*x1348))+((x1346*x1348))+(((0.4)*x1346))+(((0.4)*x1347))+(((-0.39)*pz*x1350)))),-1);
if(!x1352.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1351.value)+(((1.5707963267949)*(x1352.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1353=IKcos(j20);
IkReal x1354=(pz*x1353);
IkReal x1355=(cj19*px);
IkReal x1356=IKsin(j20);
IkReal x1357=((0.8)*x1356);
IkReal x1358=(py*sj19);
IkReal x1359=((0.39)*gconst0);
IkReal x1360=((1.0)*x1355);
IkReal x1361=((1.0)*x1358);
if((((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x1362=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0)))))));
evalcond[0]=((-0.32)+((x1355*x1357))+(((0.8)*x1354))+((x1357*x1358))+(((-1.0)*(0.312)*gconst0)));
evalcond[1]=((0.4)+(((-1.0)*x1356*x1361))+(((-1.0)*x1356*x1360))+(((-1.0)*x1354))+x1359);
evalcond[2]=((((-0.4)*x1353))+pz+(((-1.0)*x1353*x1359))+(((-1.0)*x1356*x1362)));
evalcond[3]=((((-1.0)*x1353*x1361))+((pz*x1356))+(((-1.0)*x1353*x1360))+(((-1.0)*x1362)));
evalcond[4]=((((-1.0)*x1353*x1362))+(((0.4)*x1356))+(((-1.0)*x1360))+((x1356*x1359))+(((-1.0)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst0=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1363=(px*sj19);
IkReal x1364=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst0))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst0))+(((-1.0)*(1.0)*pp)));
evalcond[2]=(x1363+(((-1.0)*x1364)));
evalcond[3]=((((-1.0)*x1363))+x1364);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1365=(cj19*px);
IkReal x1366=(py*sj19);
IkReal x1367=((0.39)*gconst0);
IkReal x1368=gconst0*gconst0;
if((((1.0)+(((-1.0)*x1368)))) < -0.00001)
continue;
IkReal x1369=IKsqrt(((1.0)+(((-1.0)*x1368))));
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(IKsign((((x1365*x1367))+(((0.4)*x1365))+(((0.39)*pz*x1369))+((x1366*x1367))+(((0.4)*x1366)))),-1);
if(!x1370.valid){
continue;
}
CheckValue<IkReal> x1371 = IKatan2WithCheck(IkReal(((0.16)+(((0.312)*gconst0))+(((0.1521)*x1368))+(((-1.0)*(1.0)*(pz*pz))))),((((0.1521)*gconst0*x1369))+(((0.156)*x1369))+((pz*x1365))+((pz*x1366))),IKFAST_ATAN2_MAGTHRESH);
if(!x1371.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1370.value)))+(x1371.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1372=IKcos(j20);
IkReal x1373=(pz*x1372);
IkReal x1374=(cj19*px);
IkReal x1375=IKsin(j20);
IkReal x1376=((0.8)*x1375);
IkReal x1377=(py*sj19);
IkReal x1378=((0.39)*gconst0);
IkReal x1379=((1.0)*x1374);
IkReal x1380=((1.0)*x1377);
if((((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x1381=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst0*gconst0)))))));
evalcond[0]=((-0.32)+((x1376*x1377))+(((0.8)*x1373))+(((-1.0)*(0.312)*gconst0))+((x1374*x1376)));
evalcond[1]=((0.4)+x1378+(((-1.0)*x1375*x1380))+(((-1.0)*x1375*x1379))+(((-1.0)*x1373)));
evalcond[2]=((((-0.4)*x1372))+pz+((x1375*x1381))+(((-1.0)*x1372*x1378)));
evalcond[3]=((((-1.0)*x1372*x1380))+((pz*x1375))+x1381+(((-1.0)*x1372*x1379)));
evalcond[4]=(((x1372*x1381))+(((0.4)*x1375))+((x1375*x1378))+(((-1.0)*x1380))+(((-1.0)*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst1=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1382=(px*sj19);
IkReal x1383=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst1))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst1))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*x1383))+x1382);
evalcond[3]=((((-1.0)*x1382))+x1383);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1384=(cj19*px);
IkReal x1385=(py*sj19);
IkReal x1386=((0.39)*gconst1);
IkReal x1387=gconst1*gconst1;
if((((1.0)+(((-1.0)*x1387)))) < -0.00001)
continue;
IkReal x1388=IKsqrt(((1.0)+(((-1.0)*x1387))));
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign((((x1385*x1386))+((x1384*x1386))+(((-0.39)*pz*x1388))+(((0.4)*x1385))+(((0.4)*x1384)))),-1);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1387))+(((0.312)*gconst1))+(((-1.0)*(1.0)*(pz*pz))))),(((pz*x1384))+(((-0.1521)*gconst1*x1388))+((pz*x1385))+(((-0.156)*x1388))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1389.value)))+(x1390.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1391=IKcos(j20);
IkReal x1392=(pz*x1391);
IkReal x1393=(cj19*px);
IkReal x1394=IKsin(j20);
IkReal x1395=((0.8)*x1394);
IkReal x1396=(py*sj19);
IkReal x1397=((0.39)*gconst1);
IkReal x1398=((1.0)*x1393);
IkReal x1399=((1.0)*x1396);
if((((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x1400=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1)))))));
evalcond[0]=((-0.32)+(((0.8)*x1392))+((x1395*x1396))+((x1393*x1395))+(((-1.0)*(0.312)*gconst1)));
evalcond[1]=((0.4)+(((-1.0)*x1394*x1398))+(((-1.0)*x1392))+x1397+(((-1.0)*x1394*x1399)));
evalcond[2]=((((-0.4)*x1391))+pz+(((-1.0)*x1394*x1400))+(((-1.0)*x1391*x1397)));
evalcond[3]=((((-1.0)*x1391*x1398))+(((-1.0)*x1391*x1399))+(((-1.0)*x1400))+((pz*x1394)));
evalcond[4]=((((-1.0)*x1391*x1400))+(((0.4)*x1394))+((x1394*x1397))+(((-1.0)*x1399))+(((-1.0)*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst1=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1401=(px*sj19);
IkReal x1402=(cj19*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst1))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst1))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*x1402))+x1401);
evalcond[3]=((((-1.0)*x1401))+x1402);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1403=(cj19*px);
IkReal x1404=(py*sj19);
IkReal x1405=((0.39)*gconst1);
IkReal x1406=gconst1*gconst1;
if((((1.0)+(((-1.0)*x1406)))) < -0.00001)
continue;
IkReal x1407=IKsqrt(((1.0)+(((-1.0)*x1406))));
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((0.16)+(((0.312)*gconst1))+(((0.1521)*x1406))+(((-1.0)*(1.0)*(pz*pz))))),(((pz*x1404))+(((0.1521)*gconst1*x1407))+((pz*x1403))+(((0.156)*x1407))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign((((x1404*x1405))+(((0.39)*pz*x1407))+((x1403*x1405))+(((0.4)*x1404))+(((0.4)*x1403)))),-1);
if(!x1409.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1408.value)+(((1.5707963267949)*(x1409.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1410=IKcos(j20);
IkReal x1411=(pz*x1410);
IkReal x1412=(cj19*px);
IkReal x1413=IKsin(j20);
IkReal x1414=((0.8)*x1413);
IkReal x1415=(py*sj19);
IkReal x1416=((0.39)*gconst1);
IkReal x1417=((1.0)*x1412);
IkReal x1418=((1.0)*x1415);
if((((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x1419=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst1*gconst1)))))));
evalcond[0]=((-0.32)+((x1412*x1414))+((x1414*x1415))+(((0.8)*x1411))+(((-1.0)*(0.312)*gconst1)));
evalcond[1]=((0.4)+(((-1.0)*x1411))+(((-1.0)*x1413*x1418))+x1416+(((-1.0)*x1413*x1417)));
evalcond[2]=(((x1413*x1419))+(((-0.4)*x1410))+pz+(((-1.0)*x1410*x1416)));
evalcond[3]=((((-1.0)*x1410*x1418))+(((-1.0)*x1410*x1417))+((pz*x1413))+x1419);
evalcond[4]=(((x1413*x1416))+(((-1.0)*x1417))+(((0.4)*x1413))+(((-1.0)*x1418))+((x1410*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1420=((100.0)*pz);
IkReal x1421=(pp*pz);
IkReal x1422=(cj19*px*sj22);
IkReal x1423=(py*sj19*sj22);
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(((((-125.0)*x1421))+(((-39.0)*x1422))+(((-39.0)*x1423))+(((-1.0)*(0.9875)*pz))),-1);
if(!x1424.valid){
continue;
}
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(((((-3900.0)*x1422))+(((-12500.0)*x1421))+(((-3900.0)*x1423))+(((-1.0)*(98.75)*pz))),-1);
if(!x1425.valid){
continue;
}
if( IKabs(((x1424.value)*(((((-1.0)*py*sj19*x1420))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22))+(((-1.0)*cj19*px*x1420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1425.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1424.value)*(((((-1.0)*py*sj19*x1420))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22))+(((-1.0)*cj19*px*x1420))))))+IKsqr(((x1425.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((x1424.value)*(((((-1.0)*py*sj19*x1420))+(((-1.0)*(48.75)*pp*sj22))+(((-1.0)*(0.385125)*sj22))+(((-1.0)*cj19*px*x1420))))), ((x1425.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1426=IKcos(j20);
IkReal x1427=IKsin(j20);
IkReal x1428=((0.39)*sj22);
IkReal x1429=(cj19*px);
IkReal x1430=((1.0)*x1429);
IkReal x1431=(py*sj19);
IkReal x1432=((1.0)*x1431);
IkReal x1433=(pz*x1426);
IkReal x1434=((0.8)*x1427);
IkReal x1435=((0.39)*cj22);
evalcond[0]=((((-1.0)*x1427*x1428))+(((-1.25)*pp*x1426))+pz+(((-0.009875)*x1426)));
evalcond[1]=(((pz*x1427))+(((-1.0)*x1426*x1432))+(((-1.0)*x1428))+(((-1.0)*x1426*x1430)));
evalcond[2]=((-0.0079)+((x1429*x1434))+(((0.8)*x1433))+(((-1.0)*(1.0)*pp))+((x1431*x1434)));
evalcond[3]=((0.4)+(((-1.0)*x1427*x1430))+(((-1.0)*x1427*x1432))+x1435+(((-1.0)*x1433)));
evalcond[4]=((((-1.0)*x1426*x1428))+(((-1.0)*x1432))+(((-1.0)*x1430))+((x1427*x1435))+(((0.4)*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1436=(cj19*px);
IkReal x1437=(py*sj19);
IkReal x1438=((3900.0)*pz);
IkReal x1439=((12500.0)*pp);
IkReal x1440=((3900.0)*sj22);
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal(((((-98.75)*x1437))+(((-1.0)*x1436*x1439))+(((-1.0)*x1437*x1439))+(((-98.75)*x1436))+(((-1.0)*sj22*x1438)))),((((-1.0)*cj22*x1438))+((x1436*x1440))+(((-1.0)*(4000.0)*pz))+((x1437*x1440))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
CheckValue<IkReal> x1442=IKPowWithIntegerCheck(IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((-1.0)*(5000.0)*pp))+(((1521.0)*(cj22*cj22)))+(((-1.0)*(4875.0)*cj22*pp)))),-1);
if(!x1442.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1441.value)+(((1.5707963267949)*(x1442.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1443=IKcos(j20);
IkReal x1444=IKsin(j20);
IkReal x1445=((0.39)*sj22);
IkReal x1446=(cj19*px);
IkReal x1447=((1.0)*x1446);
IkReal x1448=(py*sj19);
IkReal x1449=((1.0)*x1448);
IkReal x1450=(pz*x1443);
IkReal x1451=((0.8)*x1444);
IkReal x1452=((0.39)*cj22);
evalcond[0]=((((-1.25)*pp*x1443))+pz+(((-1.0)*x1444*x1445))+(((-0.009875)*x1443)));
evalcond[1]=((((-1.0)*x1445))+(((-1.0)*x1443*x1447))+((pz*x1444))+(((-1.0)*x1443*x1449)));
evalcond[2]=((-0.0079)+(((0.8)*x1450))+((x1448*x1451))+((x1446*x1451))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x1444*x1449))+(((-1.0)*x1444*x1447))+x1452+(((-1.0)*x1450)));
evalcond[4]=((((-1.0)*x1449))+((x1444*x1452))+(((-1.0)*x1447))+(((0.4)*x1444))+(((-1.0)*x1443*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1453=(cj19*px);
IkReal x1454=(py*sj19);
IkReal x1455=((125.0)*pp);
IkReal x1456=((100.0)*pz);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(((((0.9875)*x1453))+(((-1.0)*(39.0)*pz*sj22))+((x1454*x1455))+(((0.9875)*x1454))+((x1453*x1455)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp)))),((((-1.0)*(15.21)*cj22*sj22))+(((-1.0)*(15.6)*sj22))+((x1453*x1456))+((x1454*x1456))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1459=IKcos(j20);
IkReal x1460=IKsin(j20);
IkReal x1461=((0.39)*sj22);
IkReal x1462=(cj19*px);
IkReal x1463=((1.0)*x1462);
IkReal x1464=(py*sj19);
IkReal x1465=((1.0)*x1464);
IkReal x1466=(pz*x1459);
IkReal x1467=((0.8)*x1460);
IkReal x1468=((0.39)*cj22);
evalcond[0]=((((-1.25)*pp*x1459))+(((-1.0)*x1460*x1461))+(((-0.009875)*x1459))+pz);
evalcond[1]=((((-1.0)*x1459*x1463))+((pz*x1460))+(((-1.0)*x1459*x1465))+(((-1.0)*x1461)));
evalcond[2]=((-0.0079)+(((0.8)*x1466))+((x1464*x1467))+((x1462*x1467))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x1460*x1465))+x1468+(((-1.0)*x1466))+(((-1.0)*x1460*x1463)));
evalcond[4]=(((x1460*x1468))+(((-1.0)*x1459*x1461))+(((-1.0)*x1465))+(((0.4)*x1460))+(((-1.0)*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1469=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*cj22))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x1469;
evalcond[3]=x1469;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x1470=(cj19*px);
IkReal x1471=(py*sj19);
IkReal x1472=(pz*sj22);
IkReal x1473=(cj19*pp*px);
IkReal x1474=(pp*py*sj19);
IkReal x1475=((100.0)*pz);
j20eval[0]=(x1470+x1471+(((126.582278481013)*x1473))+(((126.582278481013)*x1474))+(((39.4936708860759)*x1472)));
j20eval[1]=IKsign(((((125.0)*x1473))+(((39.0)*x1472))+(((0.9875)*x1470))+(((125.0)*x1474))+(((0.9875)*x1471))));
j20eval[2]=((IKabs(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp)))))+(IKabs(((((15.21)*cj22*sj22))+(((15.6)*sj22))+((x1470*x1475))+((x1471*x1475))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x1476=(cj22*pp);
IkReal x1477=cj22*cj22;
IkReal x1478=((3900.0)*pz);
IkReal x1479=((3900.0)*sj22);
IkReal x1480=(cj19*px);
IkReal x1481=(py*sj19);
IkReal x1482=((12500.0)*pp);
j20eval[0]=((-40.519311911717)+(((39.4936708860759)*x1477))+(((-126.582278481013)*x1476))+(((-1.0)*(129.827977929244)*pp))+(((-1.0)*(1.0)*cj22)));
j20eval[1]=IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((-4875.0)*x1476))+(((1521.0)*x1477))+(((-1.0)*(5000.0)*pp))));
j20eval[2]=((IKabs(((((-98.75)*x1480))+((sj22*x1478))+(((-98.75)*x1481))+(((-1.0)*x1481*x1482))+(((-1.0)*x1480*x1482)))))+(IKabs(((((-1.0)*x1479*x1481))+(((-1.0)*cj22*x1478))+(((-1.0)*x1479*x1480))+(((-1.0)*(4000.0)*pz))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x1483=((39.4936708860759)*sj22);
j20eval[0]=((((-1.0)*(126.582278481013)*pp*pz))+(((-1.0)*(1.0)*pz))+((cj19*px*x1483))+((py*sj19*x1483)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst2=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1484=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst2))+cj22)))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((-1.0)*(1.0)*pp))+(((0.312)*gconst2)));
evalcond[2]=x1484;
evalcond[3]=x1484;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1485=(cj19*px);
IkReal x1486=(py*sj19);
IkReal x1487=((0.39)*gconst2);
IkReal x1488=gconst2*gconst2;
if((((1.0)+(((-1.0)*x1488)))) < -0.00001)
continue;
IkReal x1489=IKsqrt(((1.0)+(((-1.0)*x1488))));
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign(((((0.39)*pz*x1489))+(((0.4)*x1485))+(((0.4)*x1486))+((x1486*x1487))+((x1485*x1487)))),-1);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1488))+(((-1.0)*(1.0)*(pz*pz)))+(((0.312)*gconst2)))),((((0.156)*x1489))+(((0.1521)*gconst2*x1489))+((pz*x1486))+((pz*x1485))),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1490.value)))+(x1491.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1492=IKcos(j20);
IkReal x1493=(cj19*px);
IkReal x1494=IKsin(j20);
IkReal x1495=((0.8)*x1494);
IkReal x1496=(py*sj19);
IkReal x1497=((0.39)*gconst2);
IkReal x1498=((1.0)*pz);
IkReal x1499=((1.0)*x1493);
IkReal x1500=((1.0)*x1496);
if((((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x1501=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2)))))));
evalcond[0]=((-0.32)+((x1493*x1495))+(((0.8)*pz*x1492))+(((-1.0)*(0.312)*gconst2))+((x1495*x1496)));
evalcond[1]=((0.4)+x1497+(((-1.0)*x1492*x1498))+(((-1.0)*x1494*x1500))+(((-1.0)*x1494*x1499)));
evalcond[2]=((((-0.4)*x1492))+(((-1.0)*x1492*x1497))+((x1494*x1501))+pz);
evalcond[3]=((((-1.0)*x1501))+((x1492*x1496))+((x1492*x1493))+(((-1.0)*x1494*x1498)));
evalcond[4]=((((-1.0)*x1500))+(((-1.0)*x1499))+(((0.4)*x1494))+((x1492*x1501))+((x1494*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst2=((0.0126602564102564)+(((-1.0)*(0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1502=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(1.0)*gconst2))+cj22)))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((-1.0)*(1.0)*pp))+(((0.312)*gconst2)));
evalcond[2]=x1502;
evalcond[3]=x1502;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1503=(cj19*px);
IkReal x1504=(py*sj19);
IkReal x1505=((0.39)*gconst2);
IkReal x1506=gconst2*gconst2;
if((((1.0)+(((-1.0)*x1506)))) < -0.00001)
continue;
IkReal x1507=IKsqrt(((1.0)+(((-1.0)*x1506))));
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(IKsign(((((-0.39)*pz*x1507))+((x1503*x1505))+((x1504*x1505))+(((0.4)*x1504))+(((0.4)*x1503)))),-1);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1506))+(((-1.0)*(1.0)*(pz*pz)))+(((0.312)*gconst2)))),((((-0.156)*x1507))+((pz*x1503))+((pz*x1504))+(((-0.1521)*gconst2*x1507))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1508.value)))+(x1509.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1510=IKcos(j20);
IkReal x1511=(cj19*px);
IkReal x1512=IKsin(j20);
IkReal x1513=((0.8)*x1512);
IkReal x1514=(py*sj19);
IkReal x1515=((0.39)*gconst2);
IkReal x1516=((1.0)*pz);
IkReal x1517=((1.0)*x1511);
IkReal x1518=((1.0)*x1514);
if((((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x1519=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst2*gconst2)))))));
evalcond[0]=((-0.32)+(((0.8)*pz*x1510))+(((-1.0)*(0.312)*gconst2))+((x1511*x1513))+((x1513*x1514)));
evalcond[1]=((0.4)+x1515+(((-1.0)*x1510*x1516))+(((-1.0)*x1512*x1518))+(((-1.0)*x1512*x1517)));
evalcond[2]=(pz+(((-1.0)*x1510*x1515))+(((-1.0)*x1512*x1519))+(((-0.4)*x1510)));
evalcond[3]=(x1519+((x1510*x1514))+(((-1.0)*x1512*x1516))+((x1510*x1511)));
evalcond[4]=((((0.4)*x1512))+(((-1.0)*x1518))+(((-1.0)*x1517))+(((-1.0)*x1510*x1519))+((x1512*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst3=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1520=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj22+(((-1.0)*(1.0)*gconst3)))))+(IKabs(((-1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst3))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x1520;
evalcond[3]=x1520;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1521=(cj19*px);
IkReal x1522=(py*sj19);
IkReal x1523=((0.39)*gconst3);
IkReal x1524=gconst3*gconst3;
if((((1.0)+(((-1.0)*x1524)))) < -0.00001)
continue;
IkReal x1525=IKsqrt(((1.0)+(((-1.0)*x1524))));
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign((((x1521*x1523))+(((0.4)*x1521))+(((0.39)*pz*x1525))+((x1522*x1523))+(((0.4)*x1522)))),-1);
if(!x1526.valid){
continue;
}
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1524))+(((0.312)*gconst3))+(((-1.0)*(1.0)*(pz*pz))))),((((0.156)*x1525))+(((0.1521)*gconst3*x1525))+((pz*x1522))+((pz*x1521))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1526.value)))+(x1527.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1528=IKcos(j20);
IkReal x1529=(cj19*px);
IkReal x1530=IKsin(j20);
IkReal x1531=((0.8)*x1530);
IkReal x1532=(py*sj19);
IkReal x1533=((0.39)*gconst3);
IkReal x1534=((1.0)*pz);
IkReal x1535=((1.0)*x1529);
IkReal x1536=((1.0)*x1532);
if((((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3))))) < -0.00001)
continue;
IkReal x1537=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3)))))));
evalcond[0]=((-0.32)+((x1531*x1532))+(((-1.0)*(0.312)*gconst3))+(((0.8)*pz*x1528))+((x1529*x1531)));
evalcond[1]=((0.4)+(((-1.0)*x1530*x1535))+x1533+(((-1.0)*x1530*x1536))+(((-1.0)*x1528*x1534)));
evalcond[2]=(((x1530*x1537))+(((-1.0)*x1528*x1533))+pz+(((-0.4)*x1528)));
evalcond[3]=(((x1528*x1529))+((x1528*x1532))+(((-1.0)*x1537))+(((-1.0)*x1530*x1534)));
evalcond[4]=(((x1528*x1537))+((x1530*x1533))+(((-1.0)*x1535))+(((0.4)*x1530))+(((-1.0)*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if((((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))) < -0.00001)
continue;
IkReal gconst3=((0.0126602564102564)+(((0.00016025641025641)*(IKsqrt(((39955041.0)+(((129580000.0)*pp))+(((100000000.0)*(pp*pp))))))))+(((1.6025641025641)*pp)));
IkReal x1538=((((-1.0)*(1.0)*cj19*py))+((px*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj22+(((-1.0)*(1.0)*gconst3)))))+(IKabs(((1.0)+(IKsign(sj22)))))), 6.28318530717959)));
evalcond[1]=((0.3121)+(((0.312)*gconst3))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x1538;
evalcond[3]=x1538;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1539=(cj19*px);
IkReal x1540=(py*sj19);
IkReal x1541=((0.39)*gconst3);
IkReal x1542=gconst3*gconst3;
if((((1.0)+(((-1.0)*x1542)))) < -0.00001)
continue;
IkReal x1543=IKsqrt(((1.0)+(((-1.0)*x1542))));
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(IKsign(((((0.4)*x1539))+((x1540*x1541))+(((-0.39)*pz*x1543))+(((0.4)*x1540))+((x1539*x1541)))),-1);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(((0.16)+(((0.1521)*x1542))+(((0.312)*gconst3))+(((-1.0)*(1.0)*(pz*pz))))),((((-0.156)*x1543))+((pz*x1540))+((pz*x1539))+(((-0.1521)*gconst3*x1543))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1544.value)))+(x1545.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1546=IKcos(j20);
IkReal x1547=(cj19*px);
IkReal x1548=IKsin(j20);
IkReal x1549=((0.8)*x1548);
IkReal x1550=(py*sj19);
IkReal x1551=((0.39)*gconst3);
IkReal x1552=((1.0)*pz);
IkReal x1553=((1.0)*x1547);
IkReal x1554=((1.0)*x1550);
if((((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3))))) < -0.00001)
continue;
IkReal x1555=((0.39)*(IKsqrt(((1.0)+(((-1.0)*(1.0)*(gconst3*gconst3)))))));
evalcond[0]=((-0.32)+((x1547*x1549))+(((-1.0)*(0.312)*gconst3))+((x1549*x1550))+(((0.8)*pz*x1546)));
evalcond[1]=((0.4)+(((-1.0)*x1546*x1552))+x1551+(((-1.0)*x1548*x1553))+(((-1.0)*x1548*x1554)));
evalcond[2]=(pz+(((-1.0)*x1546*x1551))+(((-1.0)*x1548*x1555))+(((-0.4)*x1546)));
evalcond[3]=(x1555+((x1546*x1550))+(((-1.0)*x1548*x1552))+((x1546*x1547)));
evalcond[4]=((((-1.0)*x1553))+((x1548*x1551))+(((-1.0)*x1546*x1555))+(((-1.0)*x1554))+(((0.4)*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1556=((100.0)*pz);
IkReal x1557=(pp*pz);
IkReal x1558=(cj19*px*sj22);
IkReal x1559=(py*sj19*sj22);
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(((((39.0)*x1559))+(((-125.0)*x1557))+(((-1.0)*(0.9875)*pz))+(((39.0)*x1558))),-1);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(((((3900.0)*x1559))+(((-12500.0)*x1557))+(((-1.0)*(98.75)*pz))+(((3900.0)*x1558))),-1);
if(!x1561.valid){
continue;
}
if( IKabs(((x1560.value)*(((((48.75)*pp*sj22))+(((-1.0)*py*sj19*x1556))+(((0.385125)*sj22))+(((-1.0)*cj19*px*x1556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1561.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1560.value)*(((((48.75)*pp*sj22))+(((-1.0)*py*sj19*x1556))+(((0.385125)*sj22))+(((-1.0)*cj19*px*x1556))))))+IKsqr(((x1561.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((x1560.value)*(((((48.75)*pp*sj22))+(((-1.0)*py*sj19*x1556))+(((0.385125)*sj22))+(((-1.0)*cj19*px*x1556))))), ((x1561.value)*(((1521.0)+(((-1.0)*(10000.0)*(pz*pz)))+(((-1.0)*(1521.0)*(cj22*cj22)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1562=IKcos(j20);
IkReal x1563=IKsin(j20);
IkReal x1564=((0.39)*sj22);
IkReal x1565=((1.0)*pz);
IkReal x1566=(cj19*px);
IkReal x1567=(py*sj19);
IkReal x1568=((0.8)*x1563);
IkReal x1569=((0.39)*cj22);
IkReal x1570=((1.0)*x1566);
IkReal x1571=((1.0)*x1567);
evalcond[0]=((((-0.009875)*x1562))+pz+(((-1.25)*pp*x1562))+((x1563*x1564)));
evalcond[1]=((((-1.0)*x1563*x1565))+(((-1.0)*x1564))+((x1562*x1567))+((x1562*x1566)));
evalcond[2]=((-0.0079)+(((-1.0)*(1.0)*pp))+(((0.8)*pz*x1562))+((x1566*x1568))+((x1567*x1568)));
evalcond[3]=((0.4)+(((-1.0)*x1562*x1565))+(((-1.0)*x1563*x1571))+(((-1.0)*x1563*x1570))+x1569);
evalcond[4]=((((0.4)*x1563))+((x1562*x1564))+((x1563*x1569))+(((-1.0)*x1570))+(((-1.0)*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1572=(cj19*px);
IkReal x1573=(py*sj19);
IkReal x1574=((3900.0)*pz);
IkReal x1575=((12500.0)*pp);
IkReal x1576=((3900.0)*sj22);
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal(((((-98.75)*x1572))+(((-1.0)*x1573*x1575))+(((-98.75)*x1573))+(((-1.0)*x1572*x1575))+((sj22*x1574)))),((((-1.0)*x1573*x1576))+(((-1.0)*x1572*x1576))+(((-1.0)*cj22*x1574))+(((-1.0)*(4000.0)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign(((-1560.5)+(((-1.0)*(38.5125)*cj22))+(((-1.0)*(5000.0)*pp))+(((1521.0)*(cj22*cj22)))+(((-1.0)*(4875.0)*cj22*pp)))),-1);
if(!x1578.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1577.value)+(((1.5707963267949)*(x1578.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1579=IKcos(j20);
IkReal x1580=IKsin(j20);
IkReal x1581=((0.39)*sj22);
IkReal x1582=((1.0)*pz);
IkReal x1583=(cj19*px);
IkReal x1584=(py*sj19);
IkReal x1585=((0.8)*x1580);
IkReal x1586=((0.39)*cj22);
IkReal x1587=((1.0)*x1583);
IkReal x1588=((1.0)*x1584);
evalcond[0]=(((x1580*x1581))+pz+(((-0.009875)*x1579))+(((-1.25)*pp*x1579)));
evalcond[1]=((((-1.0)*x1581))+(((-1.0)*x1580*x1582))+((x1579*x1583))+((x1579*x1584)));
evalcond[2]=((-0.0079)+(((0.8)*pz*x1579))+((x1584*x1585))+((x1583*x1585))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x1579*x1582))+x1586+(((-1.0)*x1580*x1588))+(((-1.0)*x1580*x1587)));
evalcond[4]=(((x1580*x1586))+((x1579*x1581))+(((-1.0)*x1587))+(((-1.0)*x1588))+(((0.4)*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1589=(cj19*px);
IkReal x1590=(py*sj19);
IkReal x1591=((125.0)*pp);
IkReal x1592=((100.0)*pz);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign((((x1590*x1591))+(((0.9875)*x1590))+((x1589*x1591))+(((0.9875)*x1589))+(((39.0)*pz*sj22)))),-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594 = IKatan2WithCheck(IkReal(((0.395)+(((-1.0)*(100.0)*(pz*pz)))+(((0.385125)*cj22))+(((48.75)*cj22*pp))+(((50.0)*pp)))),((((15.21)*cj22*sj22))+(((15.6)*sj22))+((x1590*x1592))+((x1589*x1592))),IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1593.value)))+(x1594.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1595=IKcos(j20);
IkReal x1596=IKsin(j20);
IkReal x1597=((0.39)*sj22);
IkReal x1598=((1.0)*pz);
IkReal x1599=(cj19*px);
IkReal x1600=(py*sj19);
IkReal x1601=((0.8)*x1596);
IkReal x1602=((0.39)*cj22);
IkReal x1603=((1.0)*x1599);
IkReal x1604=((1.0)*x1600);
evalcond[0]=(((x1596*x1597))+pz+(((-0.009875)*x1595))+(((-1.25)*pp*x1595)));
evalcond[1]=(((x1595*x1599))+(((-1.0)*x1597))+((x1595*x1600))+(((-1.0)*x1596*x1598)));
evalcond[2]=((-0.0079)+((x1599*x1601))+((x1600*x1601))+(((0.8)*pz*x1595))+(((-1.0)*(1.0)*pp)));
evalcond[3]=((0.4)+(((-1.0)*x1596*x1604))+x1602+(((-1.0)*x1595*x1598))+(((-1.0)*x1596*x1603)));
evalcond[4]=((((-1.0)*x1603))+((x1596*x1602))+(((0.4)*x1596))+((x1595*x1597))+(((-1.0)*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1605=(pz*sj21);
IkReal x1606=(cj19*px);
IkReal x1607=((39.0)*cj21*sj21*sj22);
IkReal x1608=(py*sj19);
IkReal x1609=((40.0)*cj21);
IkReal x1610=(cj19*py);
IkReal x1611=(px*sj19);
IkReal x1612=((39.0)*cj21*cj22);
IkReal x1613=((100.0)*pz*sj21);
IkReal x1614=((39.0)*sj22*(cj21*cj21));
CheckValue<IkReal> x1615 = IKatan2WithCheck(IkReal(((((-1.0)*x1611*x1612))+(((-1.0)*x1608*x1613))+(((-1.0)*x1606*x1613))+(((-1.0)*x1609*x1611))+((x1610*x1612))+((x1609*x1610)))),(((x1611*x1614))+(((-1.0)*(100.0)*sj21*(pz*pz)))+(((-1.0)*x1610*x1614))),IKFAST_ATAN2_MAGTHRESH);
if(!x1615.valid){
continue;
}
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1606*x1607))+(((-39.0)*cj22*x1605))+(((-1.0)*x1607*x1608))+(((-40.0)*x1605)))),-1);
if(!x1616.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1615.value)+(((1.5707963267949)*(x1616.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x1617=IKcos(j20);
IkReal x1618=((0.39)*cj22);
IkReal x1619=IKsin(j20);
IkReal x1620=((0.39)*cj21*sj22);
IkReal x1621=(pz*x1617);
IkReal x1622=((0.8)*x1619);
IkReal x1623=((1.0)*cj19);
IkReal x1624=(px*x1623);
IkReal x1625=((1.0)*sj19);
IkReal x1626=(py*x1625);
IkReal x1627=(pz*x1619);
IkReal x1628=((1.0)*cj19*px*x1617);
IkReal x1629=((1.0)*py*sj19*x1617);
evalcond[0]=((((-1.0)*x1617*x1618))+(((-0.4)*x1617))+(((-1.0)*x1619*x1620))+pz);
evalcond[1]=((-0.0079)+(((0.8)*x1621))+((py*sj19*x1622))+((cj19*px*x1622))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+(((-1.0)*x1619*x1624))+(((-1.0)*x1621))+(((-1.0)*x1619*x1626))+x1618);
evalcond[3]=((((-1.0)*x1626))+((x1618*x1619))+(((-1.0)*x1617*x1620))+(((-1.0)*x1624))+(((0.4)*x1619)));
evalcond[4]=((((-1.0)*sj21*x1628))+(((-1.0)*sj21*x1629))+((sj21*x1627))+(((-1.0)*cj21*px*x1625))+((cj19*cj21*py)));
evalcond[5]=((((-1.0)*(0.39)*sj22))+((cj21*x1627))+(((-1.0)*cj21*x1628))+(((-1.0)*cj21*x1629))+((px*sj19*sj21))+(((-1.0)*py*sj21*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1630=((1521.0)*(cj21*cj21));
IkReal x1631=cj22*cj22;
IkReal x1632=(cj19*px);
IkReal x1633=(py*sj19);
IkReal x1634=((3900.0)*cj22);
IkReal x1635=((3900.0)*cj21*sj22);
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal((((pz*x1635))+(((4000.0)*x1632))+((x1633*x1634))+((x1632*x1634))+(((4000.0)*x1633)))),(((pz*x1634))+(((-1.0)*x1632*x1635))+(((4000.0)*pz))+(((-1.0)*x1633*x1635))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(IKsign(((1600.0)+(((3120.0)*cj22))+(((-1.0)*x1630*x1631))+(((1521.0)*x1631))+x1630)),-1);
if(!x1637.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x1636.value)+(((1.5707963267949)*(x1637.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x1638=IKcos(j20);
IkReal x1639=((0.39)*cj22);
IkReal x1640=IKsin(j20);
IkReal x1641=((0.39)*cj21*sj22);
IkReal x1642=(pz*x1638);
IkReal x1643=((0.8)*x1640);
IkReal x1644=((1.0)*cj19);
IkReal x1645=(px*x1644);
IkReal x1646=((1.0)*sj19);
IkReal x1647=(py*x1646);
IkReal x1648=(pz*x1640);
IkReal x1649=((1.0)*cj19*px*x1638);
IkReal x1650=((1.0)*py*sj19*x1638);
evalcond[0]=((((-0.4)*x1638))+(((-1.0)*x1638*x1639))+pz+(((-1.0)*x1640*x1641)));
evalcond[1]=((-0.0079)+((cj19*px*x1643))+((py*sj19*x1643))+(((0.8)*x1642))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+x1639+(((-1.0)*x1642))+(((-1.0)*x1640*x1645))+(((-1.0)*x1640*x1647)));
evalcond[3]=((((-1.0)*x1638*x1641))+((x1639*x1640))+(((-1.0)*x1645))+(((-1.0)*x1647))+(((0.4)*x1640)));
evalcond[4]=((((-1.0)*cj21*px*x1646))+(((-1.0)*sj21*x1650))+((sj21*x1648))+(((-1.0)*sj21*x1649))+((cj19*cj21*py)));
evalcond[5]=((((-1.0)*py*sj21*x1644))+((cj21*x1648))+(((-1.0)*(0.39)*sj22))+(((-1.0)*cj21*x1650))+((px*sj19*sj21))+(((-1.0)*cj21*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1651=(cj19*px);
IkReal x1652=(py*sj19);
IkReal x1653=((39.0)*cj22);
IkReal x1654=(cj21*sj22);
IkReal x1655=((100.0)*pz);
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(IKsign(((((-40.0)*x1651))+(((-40.0)*x1652))+(((39.0)*pz*x1654))+(((-1.0)*x1652*x1653))+(((-1.0)*x1651*x1653)))),-1);
if(!x1656.valid){
continue;
}
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal(((-16.0)+(((100.0)*(pz*pz)))+(((-1.0)*(31.2)*cj22))+(((-1.0)*(15.21)*(cj22*cj22))))),((((-1.0)*x1651*x1655))+(((15.6)*x1654))+(((15.21)*cj22*x1654))+(((-1.0)*x1652*x1655))),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1656.value)))+(x1657.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x1658=IKcos(j20);
IkReal x1659=((0.39)*cj22);
IkReal x1660=IKsin(j20);
IkReal x1661=((0.39)*cj21*sj22);
IkReal x1662=(pz*x1658);
IkReal x1663=((0.8)*x1660);
IkReal x1664=((1.0)*cj19);
IkReal x1665=(px*x1664);
IkReal x1666=((1.0)*sj19);
IkReal x1667=(py*x1666);
IkReal x1668=(pz*x1660);
IkReal x1669=((1.0)*cj19*px*x1658);
IkReal x1670=((1.0)*py*sj19*x1658);
evalcond[0]=((((-1.0)*x1658*x1659))+pz+(((-0.4)*x1658))+(((-1.0)*x1660*x1661)));
evalcond[1]=((-0.0079)+((py*sj19*x1663))+(((0.8)*x1662))+((cj19*px*x1663))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((0.4)+(((-1.0)*x1660*x1665))+(((-1.0)*x1662))+x1659+(((-1.0)*x1660*x1667)));
evalcond[3]=(((x1659*x1660))+(((-1.0)*x1667))+(((-1.0)*x1665))+(((-1.0)*x1658*x1661))+(((0.4)*x1660)));
evalcond[4]=((((-1.0)*sj21*x1670))+(((-1.0)*sj21*x1669))+((sj21*x1668))+(((-1.0)*cj21*px*x1666))+((cj19*cj21*py)));
evalcond[5]=((((-1.0)*cj21*x1670))+(((-1.0)*py*sj21*x1664))+(((-1.0)*(0.39)*sj22))+(((-1.0)*cj21*x1669))+((px*sj19*sj21))+((cj21*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x161=(cj20*sj22);
IkReal x162=((1.0)*cj21);
IkReal x163=(cj22*sj20);
IkReal x164=((((-1.0)*x162*x163))+x161);
IkReal x165=(sj20*sj22);
IkReal x166=(cj20*cj22);
IkReal x167=(((cj21*x166))+x165);
IkReal x168=(((cj22*((cj19*sj21))))+((sj19*x167)));
IkReal x169=((1.0)*sj19*sj21);
IkReal x170=((((-1.0)*cj22*x169))+((cj19*x167)));
IkReal x171=(sj20*sj21);
IkReal x172=((((-1.0)*cj20*x169))+((cj19*cj21)));
IkReal x173=((1.0)*cj19*sj21);
IkReal x174=((((-1.0)*cj20*x173))+(((-1.0)*sj19*x162)));
IkReal x175=(((cj21*x165))+x166);
IkReal x176=((((-1.0)*x161*x162))+x163);
IkReal x177=(((cj19*x176))+((sj22*((sj19*sj21)))));
IkReal x178=((((-1.0)*sj22*x173))+((sj19*x176)));
new_r00=(((r20*x164))+((r10*x168))+((r00*x170)));
new_r01=(((r01*x170))+((r11*x168))+((r21*x164)));
new_r02=(((r12*x168))+((r22*x164))+((r02*x170)));
new_r10=(((r20*x171))+((r10*x172))+((r00*x174)));
new_r11=(((r01*x174))+((r11*x172))+((r21*x171)));
new_r12=(((r12*x172))+((r22*x171))+((r02*x174)));
new_r20=(((r20*x175))+((r00*x177))+((r10*x178)));
new_r21=(((r21*x175))+((r11*x178))+((r01*x177)));
new_r22=(((r02*x177))+((r22*x175))+((r12*x178)));
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
cj24array[0]=new_r22;
if( cj24array[0] >= -1-IKFAST_SINCOS_THRESH && cj24array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j24valid[0] = j24valid[1] = true;
    j24array[0] = IKacos(cj24array[0]);
    sj24array[0] = IKsin(j24array[0]);
    cj24array[1] = cj24array[0];
    j24array[1] = -j24array[0];
    sj24array[1] = -sj24array[0];
}
else if( isnan(cj24array[0]) )
{
    // probably any value will work
    j24valid[0] = true;
    cj24array[0] = 1; sj24array[0] = 0; j24array[0] = 0;
}
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];

{
IkReal j23eval[2];
IkReal x179=(cj20*sj22);
IkReal x180=((1.0)*cj21);
IkReal x181=(cj22*sj20);
IkReal x182=((((-1.0)*x180*x181))+x179);
IkReal x183=(sj20*sj22);
IkReal x184=(cj20*cj22);
IkReal x185=(((cj21*x184))+x183);
IkReal x186=(((sj19*x185))+((cj22*((cj19*sj21)))));
IkReal x187=((1.0)*sj19*sj21);
IkReal x188=((((-1.0)*cj22*x187))+((cj19*x185)));
IkReal x189=(sj20*sj21);
IkReal x190=x172;
IkReal x191=((1.0)*cj19*sj21);
IkReal x192=x174;
IkReal x193=(((cj21*x183))+x184);
IkReal x194=((((-1.0)*x179*x180))+x181);
IkReal x195=(((cj19*x194))+((sj22*((sj19*sj21)))));
IkReal x196=(((sj19*x194))+(((-1.0)*sj22*x191)));
new_r00=(((r20*x182))+((r00*x188))+((r10*x186)));
new_r01=(((r11*x186))+((r01*x188))+((r21*x182)));
new_r02=(((r12*x186))+((r02*x188))+((r22*x182)));
new_r10=(((r10*x190))+((r20*x189))+((r00*x192)));
new_r11=(((r21*x189))+((r11*x190))+((r01*x192)));
new_r12=(((r12*x190))+((r02*x192))+((r22*x189)));
new_r20=(((r00*x195))+((r10*x196))+((r20*x193)));
new_r21=(((r21*x193))+((r11*x196))+((r01*x195)));
new_r22=(((r22*x193))+((r02*x195))+((r12*x196)));
j23eval[0]=sj24;
j23eval[1]=IKsign(sj24);
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x197=(cj20*sj22);
IkReal x198=((1.0)*cj21);
IkReal x199=(cj22*sj20);
IkReal x200=((((-1.0)*x198*x199))+x197);
IkReal x201=(sj20*sj22);
IkReal x202=(cj20*cj22);
IkReal x203=(((cj21*x202))+x201);
IkReal x204=(((cj22*((cj19*sj21))))+((sj19*x203)));
IkReal x205=((1.0)*sj19*sj21);
IkReal x206=((((-1.0)*cj22*x205))+((cj19*x203)));
IkReal x207=(sj20*sj21);
IkReal x208=x172;
IkReal x209=((1.0)*cj19*sj21);
IkReal x210=x174;
IkReal x211=(((cj21*x201))+x202);
IkReal x212=((((-1.0)*x197*x198))+x199);
IkReal x213=(((cj19*x212))+((sj22*((sj19*sj21)))));
IkReal x214=((((-1.0)*sj22*x209))+((sj19*x212)));
new_r00=(((r00*x206))+((r10*x204))+((r20*x200)));
new_r01=(((r11*x204))+((r01*x206))+((r21*x200)));
new_r02=(((r12*x204))+((r02*x206))+((r22*x200)));
new_r10=(((r10*x208))+((r00*x210))+((r20*x207)));
new_r11=(((r01*x210))+((r11*x208))+((r21*x207)));
new_r12=(((r12*x208))+((r02*x210))+((r22*x207)));
new_r20=(((r10*x214))+((r00*x213))+((r20*x211)));
new_r21=(((r11*x214))+((r21*x211))+((r01*x213)));
new_r22=(((r12*x214))+((r22*x211))+((r02*x213)));
j23eval[0]=sj24;
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j24))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
IkReal x215=((-1.0)*(((1.0)*(x216.value))));
j23array[0]=x215;
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+x215);
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j23))))+((new_r12*(IKcos(j23)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x217=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj23*x217))+((cj23*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x217))))+IKsqr(((((-1.0)*sj23*x217))+((cj23*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x217))), ((((-1.0)*sj23*x217))+((cj23*new_r00))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x218=IKsin(j25);
IkReal x219=(cj23*x218);
IkReal x220=IKcos(j25);
IkReal x221=((1.0)*x220);
IkReal x222=((-1.0)*x221);
IkReal x223=((1.0)*sj23);
IkReal x224=(((sj23*x218))+(((-1.0)*cj23*x221)));
evalcond[0]=(((new_r11*sj23))+((cj23*new_r01))+x218);
evalcond[1]=(x219+new_r01+((sj23*x220)));
evalcond[2]=(((new_r10*sj23))+((cj23*new_r00))+x222);
evalcond[3]=((((-1.0)*x218))+((cj23*new_r10))+(((-1.0)*new_r00*x223)));
evalcond[4]=(((cj23*new_r11))+(((-1.0)*new_r01*x223))+x222);
evalcond[5]=(new_r00+x224);
evalcond[6]=(new_r11+x224);
evalcond[7]=((((-1.0)*x220*x223))+(((-1.0)*x219))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
CheckValue<IkReal> x226 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x226.valid){
continue;
}
IkReal x225=((-1.0)*(((1.0)*(x226.value))));
j23array[0]=x225;
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+x225);
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j23))))+((new_r12*(IKcos(j23)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x227=((1.0)*new_r00);
if( IKabs((((cj23*new_r01))+(((-1.0)*sj23*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj23*x227))+(((-1.0)*(1.0)*new_r01*sj23)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj23*new_r01))+(((-1.0)*sj23*x227))))+IKsqr(((((-1.0)*cj23*x227))+(((-1.0)*(1.0)*new_r01*sj23))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2((((cj23*new_r01))+(((-1.0)*sj23*x227))), ((((-1.0)*cj23*x227))+(((-1.0)*(1.0)*new_r01*sj23))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x228=IKcos(j25);
IkReal x229=IKsin(j25);
IkReal x230=((1.0)*x229);
IkReal x231=((-1.0)*x230);
IkReal x232=(cj23*x228);
IkReal x233=((1.0)*sj23);
IkReal x234=(((sj23*x228))+(((-1.0)*cj23*x230)));
evalcond[0]=(((new_r10*sj23))+((cj23*new_r00))+x228);
evalcond[1]=(((new_r11*sj23))+((cj23*new_r01))+x231);
evalcond[2]=(((sj23*x229))+new_r00+x232);
evalcond[3]=(((cj23*new_r10))+(((-1.0)*new_r00*x233))+x231);
evalcond[4]=((((-1.0)*new_r01*x233))+((cj23*new_r11))+(((-1.0)*x228)));
evalcond[5]=(new_r01+x234);
evalcond[6]=(new_r10+x234);
evalcond[7]=((((-1.0)*x232))+(((-1.0)*x229*x233))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j23, j25]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x236=IKPowWithIntegerCheck(sj24,-1);
if(!x236.valid){
continue;
}
IkReal x235=x236.value;
CheckValue<IkReal> x237=IKPowWithIntegerCheck(new_r12,-1);
if(!x237.valid){
continue;
}
if( IKabs((x235*(x237.value)*(((1.0)+(((-1.0)*(1.0)*(cj24*cj24)))+(((-1.0)*(1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x235)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x235*(x237.value)*(((1.0)+(((-1.0)*(1.0)*(cj24*cj24)))+(((-1.0)*(1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x235))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2((x235*(x237.value)*(((1.0)+(((-1.0)*(1.0)*(cj24*cj24)))+(((-1.0)*(1.0)*(new_r02*new_r02)))))), (new_r02*x235));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[8];
IkReal x238=IKcos(j23);
IkReal x239=((1.0)*sj24);
IkReal x240=(x238*x239);
IkReal x241=IKsin(j23);
IkReal x242=(x239*x241);
IkReal x243=(new_r02*x238);
IkReal x244=(new_r12*x241);
IkReal x245=((1.0)*cj24);
evalcond[0]=((((-1.0)*x240))+new_r02);
evalcond[1]=((((-1.0)*x242))+new_r12);
evalcond[2]=(((new_r12*x238))+(((-1.0)*new_r02*x241)));
evalcond[3]=(x244+x243+(((-1.0)*x239)));
evalcond[4]=(((cj24*x243))+(((-1.0)*new_r22*x239))+((cj24*x244)));
evalcond[5]=((((-1.0)*new_r10*x242))+(((-1.0)*new_r00*x240))+(((-1.0)*new_r20*x245)));
evalcond[6]=((((-1.0)*new_r01*x240))+(((-1.0)*new_r21*x245))+(((-1.0)*new_r11*x242)));
evalcond[7]=((1.0)+(((-1.0)*x239*x243))+(((-1.0)*new_r22*x245))+(((-1.0)*x239*x244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j25eval[2];
IkReal x246=(cj20*sj22);
IkReal x247=((1.0)*cj21);
IkReal x248=(cj22*sj20);
IkReal x249=(x246+(((-1.0)*x247*x248)));
IkReal x250=(sj20*sj22);
IkReal x251=(cj20*cj22);
IkReal x252=(x250+((cj21*x251)));
IkReal x253=(((cj22*((cj19*sj21))))+((sj19*x252)));
IkReal x254=((1.0)*sj19*sj21);
IkReal x255=(((cj19*x252))+(((-1.0)*cj22*x254)));
IkReal x256=(sj20*sj21);
IkReal x257=x172;
IkReal x258=((1.0)*cj19*sj21);
IkReal x259=x174;
IkReal x260=(x251+((cj21*x250)));
IkReal x261=(x248+(((-1.0)*x246*x247)));
IkReal x262=(((cj19*x261))+((sj22*((sj19*sj21)))));
IkReal x263=((((-1.0)*sj22*x258))+((sj19*x261)));
new_r00=(((r10*x253))+((r20*x249))+((r00*x255)));
new_r01=(((r21*x249))+((r11*x253))+((r01*x255)));
new_r02=(((r12*x253))+((r22*x249))+((r02*x255)));
new_r10=(((r20*x256))+((r00*x259))+((r10*x257)));
new_r11=(((r01*x259))+((r21*x256))+((r11*x257)));
new_r12=(((r02*x259))+((r12*x257))+((r22*x256)));
new_r20=(((r00*x262))+((r20*x260))+((r10*x263)));
new_r21=(((r11*x263))+((r01*x262))+((r21*x260)));
new_r22=(((r12*x263))+((r22*x260))+((r02*x262)));
j25eval[0]=sj24;
j25eval[1]=IKsign(sj24);
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  )
{
{
IkReal j25eval[2];
IkReal x264=(cj20*sj22);
IkReal x265=((1.0)*cj21);
IkReal x266=(cj22*sj20);
IkReal x267=(x264+(((-1.0)*x265*x266)));
IkReal x268=(sj20*sj22);
IkReal x269=(cj20*cj22);
IkReal x270=(x268+((cj21*x269)));
IkReal x271=(((cj22*((cj19*sj21))))+((sj19*x270)));
IkReal x272=((1.0)*sj19*sj21);
IkReal x273=(((cj19*x270))+(((-1.0)*cj22*x272)));
IkReal x274=(sj20*sj21);
IkReal x275=x172;
IkReal x276=((1.0)*cj19*sj21);
IkReal x277=x174;
IkReal x278=(x269+((cj21*x268)));
IkReal x279=(x266+(((-1.0)*x264*x265)));
IkReal x280=(((cj19*x279))+((sj22*((sj19*sj21)))));
IkReal x281=(((sj19*x279))+(((-1.0)*sj22*x276)));
new_r00=(((r10*x271))+((r20*x267))+((r00*x273)));
new_r01=(((r01*x273))+((r11*x271))+((r21*x267)));
new_r02=(((r22*x267))+((r02*x273))+((r12*x271)));
new_r10=(((r00*x277))+((r10*x275))+((r20*x274)));
new_r11=(((r01*x277))+((r21*x274))+((r11*x275)));
new_r12=(((r12*x275))+((r02*x277))+((r22*x274)));
new_r20=(((r00*x280))+((r20*x278))+((r10*x281)));
new_r21=(((r21*x278))+((r01*x280))+((r11*x281)));
new_r22=(((r22*x278))+((r12*x281))+((r02*x280)));
j25eval[0]=sj23;
j25eval[1]=sj24;
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  )
{
{
IkReal j25eval[3];
IkReal x282=(cj20*sj22);
IkReal x283=((1.0)*cj21);
IkReal x284=(cj22*sj20);
IkReal x285=((((-1.0)*x283*x284))+x282);
IkReal x286=(sj20*sj22);
IkReal x287=(cj20*cj22);
IkReal x288=(((cj21*x287))+x286);
IkReal x289=(((sj19*x288))+((cj22*((cj19*sj21)))));
IkReal x290=((1.0)*sj19*sj21);
IkReal x291=((((-1.0)*cj22*x290))+((cj19*x288)));
IkReal x292=(sj20*sj21);
IkReal x293=x172;
IkReal x294=((1.0)*cj19*sj21);
IkReal x295=x174;
IkReal x296=(((cj21*x286))+x287);
IkReal x297=((((-1.0)*x282*x283))+x284);
IkReal x298=(((cj19*x297))+((sj22*((sj19*sj21)))));
IkReal x299=((((-1.0)*sj22*x294))+((sj19*x297)));
new_r00=(((r00*x291))+((r20*x285))+((r10*x289)));
new_r01=(((r01*x291))+((r11*x289))+((r21*x285)));
new_r02=(((r02*x291))+((r22*x285))+((r12*x289)));
new_r10=(((r20*x292))+((r00*x295))+((r10*x293)));
new_r11=(((r01*x295))+((r11*x293))+((r21*x292)));
new_r12=(((r12*x293))+((r22*x292))+((r02*x295)));
new_r20=(((r00*x298))+((r10*x299))+((r20*x296)));
new_r21=(((r01*x298))+((r11*x299))+((r21*x296)));
new_r22=(((r22*x296))+((r12*x299))+((r02*x298)));
j25eval[0]=cj23;
j25eval[1]=cj24;
j25eval[2]=sj24;
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  || IKabs(j25eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x300=((1.0)*cj24);
IkReal x301=((((-1.0)*x300))+new_r22);
IkReal x302=((1.0)*sj24);
IkReal x303=(new_r12+(((-1.0)*x302)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=x301;
evalcond[2]=x301;
evalcond[3]=new_r02;
evalcond[4]=x303;
evalcond[5]=x303;
evalcond[6]=(((cj24*new_r12))+(((-1.0)*new_r22*x302)));
evalcond[7]=((((-1.0)*new_r20*x300))+(((-1.0)*new_r10*x302)));
evalcond[8]=((((-1.0)*new_r11*x302))+(((-1.0)*new_r21*x300)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x300))+(((-1.0)*new_r12*x302)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x304.valid){
continue;
}
CheckValue<IkReal> x305 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x305.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(((1.5707963267949)*(x304.value)))+(x305.value));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x306=IKcos(j25);
IkReal x307=IKsin(j25);
IkReal x308=((1.0)*new_r12);
IkReal x309=((1.0)*x306);
IkReal x310=((-1.0)*x309);
evalcond[0]=(((new_r12*x306))+new_r20);
evalcond[1]=(((new_r22*x307))+new_r11);
evalcond[2]=((((-1.0)*x307*x308))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x309))+new_r10);
evalcond[4]=((((-1.0)*x307))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=(x310+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r11*new_r22))+x307+(((-1.0)*new_r21*x308)));
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x308))+x310);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x311=((1.0)*cj24);
IkReal x312=((((-1.0)*x311))+new_r22);
IkReal x313=((1.0)*sj24);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=x312;
evalcond[2]=x312;
evalcond[3]=new_r02;
evalcond[4]=(sj24+new_r12);
evalcond[5]=((((-1.0)*x313))+(((-1.0)*(1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x311))+(((-1.0)*new_r22*x313)));
evalcond[7]=((((-1.0)*new_r20*x311))+((new_r10*sj24)));
evalcond[8]=((((-1.0)*new_r21*x311))+((new_r11*sj24)));
evalcond[9]=((1.0)+((new_r12*sj24))+(((-1.0)*new_r22*x311)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r00, new_r01);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x314=IKsin(j25);
IkReal x315=((1.0)*(IKcos(j25)));
IkReal x316=((-1.0)*x315);
IkReal x317=((1.0)*new_r11);
IkReal x318=((1.0)*new_r10);
evalcond[0]=(((new_r12*x314))+new_r21);
evalcond[1]=((((-1.0)*x314))+new_r00);
evalcond[2]=(x316+new_r01);
evalcond[3]=((((-1.0)*new_r12*x315))+new_r20);
evalcond[4]=((((-1.0)*x317))+((new_r22*x314)));
evalcond[5]=((((-1.0)*x318))+(((-1.0)*new_r22*x315)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x317))+x314);
evalcond[7]=(((new_r12*new_r20))+x316+(((-1.0)*new_r22*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x319=((1.0)*cj23);
IkReal x320=((1.0)*sj23);
IkReal x321=((((-1.0)*new_r02*x320))+((cj23*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j24)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x319))+new_r02);
evalcond[3]=(new_r12+(((-1.0)*x320)));
evalcond[4]=x321;
evalcond[5]=x321;
evalcond[6]=((-1.0)+((cj23*new_r02))+((new_r12*sj23)));
evalcond[7]=(((new_r11*sj23))+((cj23*new_r01)));
evalcond[8]=(((new_r10*sj23))+((cj23*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x319))+(((-1.0)*new_r10*x320)));
evalcond[10]=((((-1.0)*new_r11*x320))+(((-1.0)*new_r01*x319)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x319))+(((-1.0)*new_r12*x320)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x322=IKcos(j25);
IkReal x323=IKsin(j25);
IkReal x324=((1.0)*x323);
IkReal x325=((-1.0)*x324);
IkReal x326=((1.0)*x322);
IkReal x327=((1.0)*new_r12);
evalcond[0]=(x322+new_r20);
evalcond[1]=(x325+new_r21);
evalcond[2]=(((new_r12*x322))+new_r01);
evalcond[3]=(((new_r12*x323))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x326))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x324)));
evalcond[6]=((((-1.0)*new_r00*x327))+x325+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x326))+((new_r02*new_r11))+(((-1.0)*new_r01*x327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x329=((1.0)+((cj23*new_r02))+((new_r12*sj23)));
IkReal x330=(((new_r11*sj23))+((cj23*new_r01)));
IkReal x331=(((new_r10*sj23))+((cj23*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j24)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj23+new_r02);
evalcond[3]=(sj23+new_r12);
evalcond[4]=x328;
evalcond[5]=x328;
evalcond[6]=x329;
evalcond[7]=x330;
evalcond[8]=x331;
evalcond[9]=x331;
evalcond[10]=x330;
evalcond[11]=x329;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x332=IKsin(j25);
IkReal x333=IKcos(j25);
IkReal x334=((1.0)*x333);
IkReal x335=((-1.0)*x334);
IkReal x336=((1.0)*x332);
IkReal x337=((1.0)*new_r02);
evalcond[0]=(x332+new_r21);
evalcond[1]=(x335+new_r20);
evalcond[2]=(((new_r02*x333))+new_r11);
evalcond[3]=(((new_r02*x332))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x334))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x336))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*x336))+(((-1.0)*new_r10*x337)));
evalcond[7]=(((new_r01*new_r12))+x335+(((-1.0)*new_r11*x337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x338=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x339=(((cj23*new_r02))+((new_r12*sj23)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j24))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x338;
evalcond[7]=x338;
evalcond[8]=x339;
evalcond[9]=x339;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x340=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj23*x340))+((cj23*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x340))))+IKsqr(((((-1.0)*sj23*x340))+((cj23*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x340))), ((((-1.0)*sj23*x340))+((cj23*new_r00))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x341=IKsin(j25);
IkReal x342=(cj23*x341);
IkReal x343=IKcos(j25);
IkReal x344=((1.0)*x343);
IkReal x345=((-1.0)*x344);
IkReal x346=((1.0)*sj23);
IkReal x347=(((sj23*x341))+(((-1.0)*cj23*x344)));
evalcond[0]=(((new_r11*sj23))+((cj23*new_r01))+x341);
evalcond[1]=(((sj23*x343))+x342+new_r01);
evalcond[2]=(((new_r10*sj23))+((cj23*new_r00))+x345);
evalcond[3]=((((-1.0)*x341))+((cj23*new_r10))+(((-1.0)*new_r00*x346)));
evalcond[4]=((((-1.0)*new_r01*x346))+((cj23*new_r11))+x345);
evalcond[5]=(x347+new_r00);
evalcond[6]=(new_r11+x347);
evalcond[7]=((((-1.0)*x343*x346))+new_r10+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x348=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x349=(cj23*new_r02);
IkReal x350=(new_r12*sj23);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x348;
evalcond[7]=x348;
evalcond[8]=(x350+x349);
evalcond[9]=((((-1.0)*x350))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x351=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj23*x351))+((cj23*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj23*x351))+((cj23*new_r01))))+IKsqr(((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x351))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((-1.0)*sj23*x351))+((cj23*new_r01))), ((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x351))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x352=IKcos(j25);
IkReal x353=IKsin(j25);
IkReal x354=((1.0)*x353);
IkReal x355=((-1.0)*x354);
IkReal x356=(cj23*x352);
IkReal x357=((1.0)*sj23);
IkReal x358=(((sj23*x352))+(((-1.0)*cj23*x354)));
evalcond[0]=(((new_r10*sj23))+x352+((cj23*new_r00)));
evalcond[1]=(((new_r11*sj23))+x355+((cj23*new_r01)));
evalcond[2]=(((sj23*x353))+x356+new_r00);
evalcond[3]=((((-1.0)*new_r00*x357))+x355+((cj23*new_r10)));
evalcond[4]=(((cj23*new_r11))+(((-1.0)*new_r01*x357))+(((-1.0)*x352)));
evalcond[5]=(x358+new_r01);
evalcond[6]=(x358+new_r10);
evalcond[7]=((((-1.0)*x353*x357))+(((-1.0)*x356))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x359=((1.0)*cj24);
IkReal x360=((((-1.0)*x359))+new_r22);
IkReal x361=((1.0)*sj24);
IkReal x362=(new_r02+(((-1.0)*x361)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=x360;
evalcond[2]=x360;
evalcond[3]=x362;
evalcond[4]=new_r12;
evalcond[5]=x362;
evalcond[6]=(((cj24*new_r02))+(((-1.0)*new_r22*x361)));
evalcond[7]=((((-1.0)*new_r00*x361))+(((-1.0)*new_r20*x359)));
evalcond[8]=((((-1.0)*new_r21*x359))+(((-1.0)*new_r01*x361)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x359))+(((-1.0)*new_r02*x361)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r10, new_r11);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x363=IKcos(j25);
IkReal x364=IKsin(j25);
IkReal x365=((1.0)*x363);
IkReal x366=((-1.0)*x365);
IkReal x367=((1.0)*new_r02);
evalcond[0]=(((new_r02*x363))+new_r20);
evalcond[1]=((((-1.0)*x364))+new_r10);
evalcond[2]=(x366+new_r11);
evalcond[3]=(((new_r22*x364))+new_r01);
evalcond[4]=((((-1.0)*x364*x367))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x365))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x364+(((-1.0)*new_r21*x367)));
evalcond[7]=((((-1.0)*new_r20*x367))+x366+((new_r00*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x368=((1.0)*cj24);
IkReal x369=((((-1.0)*x368))+new_r22);
IkReal x370=((1.0)*sj24);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=x369;
evalcond[2]=x369;
evalcond[3]=(sj24+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x370))+(((-1.0)*(1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r02*x368))+(((-1.0)*new_r22*x370)));
evalcond[7]=(((new_r00*sj24))+(((-1.0)*new_r20*x368)));
evalcond[8]=((((-1.0)*new_r21*x368))+((new_r01*sj24)));
evalcond[9]=((1.0)+((new_r02*sj24))+(((-1.0)*new_r22*x368)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x372.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(x371.value)+(((1.5707963267949)*(x372.value))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x373=IKsin(j25);
IkReal x374=((1.0)*(IKcos(j25)));
IkReal x375=((-1.0)*x374);
IkReal x376=((1.0)*new_r01);
IkReal x377=((1.0)*new_r00);
evalcond[0]=(((new_r02*x373))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x374))+new_r20);
evalcond[2]=((((-1.0)*x373))+(((-1.0)*(1.0)*new_r10)));
evalcond[3]=((((-1.0)*(1.0)*new_r11))+x375);
evalcond[4]=(((new_r22*x373))+(((-1.0)*x376)));
evalcond[5]=((((-1.0)*x377))+(((-1.0)*new_r22*x374)));
evalcond[6]=(((new_r02*new_r21))+x373+(((-1.0)*new_r22*x376)));
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x377))+x375);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j25]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x379=IKPowWithIntegerCheck(sj24,-1);
if(!x379.valid){
continue;
}
IkReal x378=x379.value;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(cj23,-1);
if(!x380.valid){
continue;
}
CheckValue<IkReal> x381=IKPowWithIntegerCheck(cj24,-1);
if(!x381.valid){
continue;
}
if( IKabs((x378*(x380.value)*(x381.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x378*(x380.value)*(x381.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24))))))+IKsqr(((-1.0)*new_r20*x378))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2((x378*(x380.value)*(x381.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24))))), ((-1.0)*new_r20*x378));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x382=IKcos(j25);
IkReal x383=IKsin(j25);
IkReal x384=((1.0)*sj24);
IkReal x385=(cj23*new_r01);
IkReal x386=(new_r11*sj23);
IkReal x387=(cj24*x383);
IkReal x388=((1.0)*sj23);
IkReal x389=((1.0)*x383);
IkReal x390=((1.0)*x382);
IkReal x391=((-1.0)*x390);
IkReal x392=(cj23*new_r00);
IkReal x393=(new_r10*sj23);
IkReal x394=(cj23*x390);
evalcond[0]=(((sj24*x382))+new_r20);
evalcond[1]=((((-1.0)*x383*x384))+new_r21);
evalcond[2]=(x387+x386+x385);
evalcond[3]=((((-1.0)*new_r00*x388))+((cj23*new_r10))+(((-1.0)*x389)));
evalcond[4]=(x391+(((-1.0)*new_r01*x388))+((cj23*new_r11)));
evalcond[5]=(((cj23*x387))+((sj23*x382))+new_r01);
evalcond[6]=(x392+x393+(((-1.0)*cj24*x390)));
evalcond[7]=((((-1.0)*cj24*x394))+new_r00+((sj23*x383)));
evalcond[8]=(((sj23*x387))+(((-1.0)*x394))+new_r11);
evalcond[9]=((((-1.0)*cj24*x382*x388))+(((-1.0)*cj23*x389))+new_r10);
evalcond[10]=(((cj24*x385))+((cj24*x386))+x383+(((-1.0)*new_r21*x384)));
evalcond[11]=(x391+((cj24*x393))+(((-1.0)*new_r20*x384))+((cj24*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x397=IKPowWithIntegerCheck(sj24,-1);
if(!x397.valid){
continue;
}
IkReal x395=x397.value;
IkReal x396=((1.0)*new_r20);
CheckValue<IkReal> x398=IKPowWithIntegerCheck(sj23,-1);
if(!x398.valid){
continue;
}
if( IKabs((x395*(x398.value)*(((((-1.0)*cj23*cj24*x396))+(((-1.0)*(1.0)*new_r00*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x395*x396)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x395*(x398.value)*(((((-1.0)*cj23*cj24*x396))+(((-1.0)*(1.0)*new_r00*sj24))))))+IKsqr(((-1.0)*x395*x396))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2((x395*(x398.value)*(((((-1.0)*cj23*cj24*x396))+(((-1.0)*(1.0)*new_r00*sj24))))), ((-1.0)*x395*x396));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x399=IKcos(j25);
IkReal x400=IKsin(j25);
IkReal x401=((1.0)*sj24);
IkReal x402=(cj23*new_r01);
IkReal x403=(new_r11*sj23);
IkReal x404=(cj24*x400);
IkReal x405=((1.0)*sj23);
IkReal x406=((1.0)*x400);
IkReal x407=((1.0)*x399);
IkReal x408=((-1.0)*x407);
IkReal x409=(cj23*new_r00);
IkReal x410=(new_r10*sj23);
IkReal x411=(cj23*x407);
evalcond[0]=(((sj24*x399))+new_r20);
evalcond[1]=((((-1.0)*x400*x401))+new_r21);
evalcond[2]=(x403+x402+x404);
evalcond[3]=((((-1.0)*x406))+((cj23*new_r10))+(((-1.0)*new_r00*x405)));
evalcond[4]=((((-1.0)*new_r01*x405))+((cj23*new_r11))+x408);
evalcond[5]=(((cj23*x404))+((sj23*x399))+new_r01);
evalcond[6]=(x410+x409+(((-1.0)*cj24*x407)));
evalcond[7]=(((sj23*x400))+(((-1.0)*cj24*x411))+new_r00);
evalcond[8]=(((sj23*x404))+new_r11+(((-1.0)*x411)));
evalcond[9]=((((-1.0)*cj23*x406))+new_r10+(((-1.0)*cj24*x399*x405)));
evalcond[10]=(((cj24*x403))+((cj24*x402))+x400+(((-1.0)*new_r21*x401)));
evalcond[11]=((((-1.0)*new_r20*x401))+x408+((cj24*x409))+((cj24*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x412=IKPowWithIntegerCheck(IKsign(sj24),-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(((1.5707963267949)*(x412.value)))+(x413.value));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x414=IKcos(j25);
IkReal x415=IKsin(j25);
IkReal x416=((1.0)*sj24);
IkReal x417=(cj23*new_r01);
IkReal x418=(new_r11*sj23);
IkReal x419=(cj24*x415);
IkReal x420=((1.0)*sj23);
IkReal x421=((1.0)*x415);
IkReal x422=((1.0)*x414);
IkReal x423=((-1.0)*x422);
IkReal x424=(cj23*new_r00);
IkReal x425=(new_r10*sj23);
IkReal x426=(cj23*x422);
evalcond[0]=(((sj24*x414))+new_r20);
evalcond[1]=((((-1.0)*x415*x416))+new_r21);
evalcond[2]=(x418+x419+x417);
evalcond[3]=((((-1.0)*x421))+(((-1.0)*new_r00*x420))+((cj23*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x420))+((cj23*new_r11))+x423);
evalcond[5]=(((cj23*x419))+new_r01+((sj23*x414)));
evalcond[6]=((((-1.0)*cj24*x422))+x425+x424);
evalcond[7]=((((-1.0)*cj24*x426))+new_r00+((sj23*x415)));
evalcond[8]=((((-1.0)*x426))+((sj23*x419))+new_r11);
evalcond[9]=((((-1.0)*cj24*x414*x420))+new_r10+(((-1.0)*cj23*x421)));
evalcond[10]=(((cj24*x418))+x415+((cj24*x417))+(((-1.0)*new_r21*x416)));
evalcond[11]=(((cj24*x424))+x423+(((-1.0)*new_r20*x416))+((cj24*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428=IKPowWithIntegerCheck(IKsign(sj24),-1);
if(!x428.valid){
continue;
}
j23array[0]=((-1.5707963267949)+(x427.value)+(((1.5707963267949)*(x428.value))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[8];
IkReal x429=IKcos(j23);
IkReal x430=((1.0)*sj24);
IkReal x431=(x429*x430);
IkReal x432=IKsin(j23);
IkReal x433=(x430*x432);
IkReal x434=(new_r02*x429);
IkReal x435=(new_r12*x432);
IkReal x436=((1.0)*cj24);
evalcond[0]=((((-1.0)*x431))+new_r02);
evalcond[1]=((((-1.0)*x433))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x432))+((new_r12*x429)));
evalcond[3]=((((-1.0)*x430))+x434+x435);
evalcond[4]=((((-1.0)*new_r22*x430))+((cj24*x434))+((cj24*x435)));
evalcond[5]=((((-1.0)*new_r10*x433))+(((-1.0)*new_r00*x431))+(((-1.0)*new_r20*x436)));
evalcond[6]=((((-1.0)*new_r11*x433))+(((-1.0)*new_r01*x431))+(((-1.0)*new_r21*x436)));
evalcond[7]=((1.0)+(((-1.0)*x430*x434))+(((-1.0)*x430*x435))+(((-1.0)*new_r22*x436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j25eval[2];
IkReal x437=(cj20*sj22);
IkReal x438=((1.0)*cj21);
IkReal x439=(cj22*sj20);
IkReal x440=((((-1.0)*x438*x439))+x437);
IkReal x441=(sj20*sj22);
IkReal x442=(cj20*cj22);
IkReal x443=(((cj21*x442))+x441);
IkReal x444=(((cj22*((cj19*sj21))))+((sj19*x443)));
IkReal x445=((1.0)*sj19*sj21);
IkReal x446=((((-1.0)*cj22*x445))+((cj19*x443)));
IkReal x447=(sj20*sj21);
IkReal x448=x172;
IkReal x449=((1.0)*cj19*sj21);
IkReal x450=x174;
IkReal x451=(((cj21*x441))+x442);
IkReal x452=(x439+(((-1.0)*x437*x438)));
IkReal x453=(((cj19*x452))+((sj22*((sj19*sj21)))));
IkReal x454=((((-1.0)*sj22*x449))+((sj19*x452)));
new_r00=(((r10*x444))+((r20*x440))+((r00*x446)));
new_r01=(((r11*x444))+((r21*x440))+((r01*x446)));
new_r02=(((r22*x440))+((r02*x446))+((r12*x444)));
new_r10=(((r10*x448))+((r20*x447))+((r00*x450)));
new_r11=(((r01*x450))+((r11*x448))+((r21*x447)));
new_r12=(((r02*x450))+((r12*x448))+((r22*x447)));
new_r20=(((r10*x454))+((r00*x453))+((r20*x451)));
new_r21=(((r01*x453))+((r11*x454))+((r21*x451)));
new_r22=(((r22*x451))+((r02*x453))+((r12*x454)));
j25eval[0]=sj24;
j25eval[1]=IKsign(sj24);
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  )
{
{
IkReal j25eval[2];
IkReal x455=(cj20*sj22);
IkReal x456=((1.0)*cj21);
IkReal x457=(cj22*sj20);
IkReal x458=(x455+(((-1.0)*x456*x457)));
IkReal x459=(sj20*sj22);
IkReal x460=(cj20*cj22);
IkReal x461=(((cj21*x460))+x459);
IkReal x462=(((cj22*((cj19*sj21))))+((sj19*x461)));
IkReal x463=((1.0)*sj19*sj21);
IkReal x464=(((cj19*x461))+(((-1.0)*cj22*x463)));
IkReal x465=(sj20*sj21);
IkReal x466=x172;
IkReal x467=((1.0)*cj19*sj21);
IkReal x468=x174;
IkReal x469=(((cj21*x459))+x460);
IkReal x470=(x457+(((-1.0)*x455*x456)));
IkReal x471=(((cj19*x470))+((sj22*((sj19*sj21)))));
IkReal x472=(((sj19*x470))+(((-1.0)*sj22*x467)));
new_r00=(((r10*x462))+((r00*x464))+((r20*x458)));
new_r01=(((r11*x462))+((r01*x464))+((r21*x458)));
new_r02=(((r12*x462))+((r02*x464))+((r22*x458)));
new_r10=(((r10*x466))+((r20*x465))+((r00*x468)));
new_r11=(((r21*x465))+((r01*x468))+((r11*x466)));
new_r12=(((r22*x465))+((r12*x466))+((r02*x468)));
new_r20=(((r20*x469))+((r00*x471))+((r10*x472)));
new_r21=(((r21*x469))+((r01*x471))+((r11*x472)));
new_r22=(((r12*x472))+((r02*x471))+((r22*x469)));
j25eval[0]=sj23;
j25eval[1]=sj24;
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  )
{
{
IkReal j25eval[3];
IkReal x473=(cj20*sj22);
IkReal x474=((1.0)*cj21);
IkReal x475=(cj22*sj20);
IkReal x476=(x473+(((-1.0)*x474*x475)));
IkReal x477=(sj20*sj22);
IkReal x478=(cj20*cj22);
IkReal x479=(x477+((cj21*x478)));
IkReal x480=(((cj22*((cj19*sj21))))+((sj19*x479)));
IkReal x481=((1.0)*sj19*sj21);
IkReal x482=(((cj19*x479))+(((-1.0)*cj22*x481)));
IkReal x483=(sj20*sj21);
IkReal x484=x172;
IkReal x485=((1.0)*cj19*sj21);
IkReal x486=x174;
IkReal x487=(((cj21*x477))+x478);
IkReal x488=(x475+(((-1.0)*x473*x474)));
IkReal x489=(((cj19*x488))+((sj22*((sj19*sj21)))));
IkReal x490=((((-1.0)*sj22*x485))+((sj19*x488)));
new_r00=(((r20*x476))+((r00*x482))+((r10*x480)));
new_r01=(((r21*x476))+((r11*x480))+((r01*x482)));
new_r02=(((r02*x482))+((r22*x476))+((r12*x480)));
new_r10=(((r00*x486))+((r20*x483))+((r10*x484)));
new_r11=(((r21*x483))+((r11*x484))+((r01*x486)));
new_r12=(((r02*x486))+((r22*x483))+((r12*x484)));
new_r20=(((r00*x489))+((r20*x487))+((r10*x490)));
new_r21=(((r01*x489))+((r21*x487))+((r11*x490)));
new_r22=(((r02*x489))+((r22*x487))+((r12*x490)));
j25eval[0]=cj23;
j25eval[1]=cj24;
j25eval[2]=sj24;
if( IKabs(j25eval[0]) < 0.0000010000000000  || IKabs(j25eval[1]) < 0.0000010000000000  || IKabs(j25eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x491=((1.0)*cj24);
IkReal x492=((((-1.0)*x491))+new_r22);
IkReal x493=((1.0)*sj24);
IkReal x494=(new_r12+(((-1.0)*x493)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=x492;
evalcond[2]=x492;
evalcond[3]=new_r02;
evalcond[4]=x494;
evalcond[5]=x494;
evalcond[6]=(((cj24*new_r12))+(((-1.0)*new_r22*x493)));
evalcond[7]=((((-1.0)*new_r10*x493))+(((-1.0)*new_r20*x491)));
evalcond[8]=((((-1.0)*new_r21*x491))+(((-1.0)*new_r11*x493)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x493))+(((-1.0)*new_r22*x491)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x495=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(((1.5707963267949)*(x495.value)))+(x496.value));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x497=IKcos(j25);
IkReal x498=IKsin(j25);
IkReal x499=((1.0)*new_r12);
IkReal x500=((1.0)*x497);
IkReal x501=((-1.0)*x500);
evalcond[0]=(((new_r12*x497))+new_r20);
evalcond[1]=(((new_r22*x498))+new_r11);
evalcond[2]=((((-1.0)*x498*x499))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x500))+new_r10);
evalcond[4]=((((-1.0)*x498))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=(x501+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r11*new_r22))+(((-1.0)*new_r21*x499))+x498);
evalcond[7]=(((new_r10*new_r22))+x501+(((-1.0)*new_r20*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x502=((1.0)*cj24);
IkReal x503=((((-1.0)*x502))+new_r22);
IkReal x504=((1.0)*sj24);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
evalcond[1]=x503;
evalcond[2]=x503;
evalcond[3]=new_r02;
evalcond[4]=(sj24+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*x504)));
evalcond[6]=((((-1.0)*new_r12*x502))+(((-1.0)*new_r22*x504)));
evalcond[7]=(((new_r10*sj24))+(((-1.0)*new_r20*x502)));
evalcond[8]=((((-1.0)*new_r21*x502))+((new_r11*sj24)));
evalcond[9]=((1.0)+((new_r12*sj24))+(((-1.0)*new_r22*x502)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r00, new_r01);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x505=IKsin(j25);
IkReal x506=((1.0)*(IKcos(j25)));
IkReal x507=((-1.0)*x506);
IkReal x508=((1.0)*new_r11);
IkReal x509=((1.0)*new_r10);
evalcond[0]=(((new_r12*x505))+new_r21);
evalcond[1]=((((-1.0)*x505))+new_r00);
evalcond[2]=(x507+new_r01);
evalcond[3]=((((-1.0)*new_r12*x506))+new_r20);
evalcond[4]=((((-1.0)*x508))+((new_r22*x505)));
evalcond[5]=((((-1.0)*new_r22*x506))+(((-1.0)*x509)));
evalcond[6]=(((new_r12*new_r21))+x505+(((-1.0)*new_r22*x508)));
evalcond[7]=(x507+(((-1.0)*new_r22*x509))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x510=((1.0)*cj23);
IkReal x511=((1.0)*sj23);
IkReal x512=(((cj23*new_r12))+(((-1.0)*new_r02*x511)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j24)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x510))+new_r02);
evalcond[3]=((((-1.0)*x511))+new_r12);
evalcond[4]=x512;
evalcond[5]=x512;
evalcond[6]=((-1.0)+((cj23*new_r02))+((new_r12*sj23)));
evalcond[7]=(((new_r11*sj23))+((cj23*new_r01)));
evalcond[8]=(((new_r10*sj23))+((cj23*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x511))+(((-1.0)*new_r00*x510)));
evalcond[10]=((((-1.0)*new_r01*x510))+(((-1.0)*new_r11*x511)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x510))+(((-1.0)*new_r12*x511)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x513=IKcos(j25);
IkReal x514=IKsin(j25);
IkReal x515=((1.0)*x514);
IkReal x516=((-1.0)*x515);
IkReal x517=((1.0)*x513);
IkReal x518=((1.0)*new_r12);
evalcond[0]=(x513+new_r20);
evalcond[1]=(x516+new_r21);
evalcond[2]=(((new_r12*x513))+new_r01);
evalcond[3]=(((new_r12*x514))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x517))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x515)));
evalcond[6]=((((-1.0)*new_r00*x518))+x516+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x517))+(((-1.0)*new_r01*x518))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x519=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x520=((1.0)+((cj23*new_r02))+((new_r12*sj23)));
IkReal x521=(((new_r11*sj23))+((cj23*new_r01)));
IkReal x522=(((new_r10*sj23))+((cj23*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j24)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj23+new_r02);
evalcond[3]=(sj23+new_r12);
evalcond[4]=x519;
evalcond[5]=x519;
evalcond[6]=x520;
evalcond[7]=x521;
evalcond[8]=x522;
evalcond[9]=x522;
evalcond[10]=x521;
evalcond[11]=x520;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x523=IKsin(j25);
IkReal x524=IKcos(j25);
IkReal x525=((1.0)*x524);
IkReal x526=((-1.0)*x525);
IkReal x527=((1.0)*x523);
IkReal x528=((1.0)*new_r02);
evalcond[0]=(new_r21+x523);
evalcond[1]=(new_r20+x526);
evalcond[2]=(new_r11+((new_r02*x524)));
evalcond[3]=(((new_r02*x523))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x525))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x527))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x528))+(((-1.0)*x527)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x528))+x526);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x529=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x530=(((cj23*new_r02))+((new_r12*sj23)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j24))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x529;
evalcond[7]=x529;
evalcond[8]=x530;
evalcond[9]=x530;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x531=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj23*new_r00))+(((-1.0)*sj23*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x531))))+IKsqr((((cj23*new_r00))+(((-1.0)*sj23*x531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj23))+(((-1.0)*cj23*x531))), (((cj23*new_r00))+(((-1.0)*sj23*x531))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x532=IKsin(j25);
IkReal x533=(cj23*x532);
IkReal x534=IKcos(j25);
IkReal x535=((1.0)*x534);
IkReal x536=((-1.0)*x535);
IkReal x537=((1.0)*sj23);
IkReal x538=((((-1.0)*cj23*x535))+((sj23*x532)));
evalcond[0]=(x532+((new_r11*sj23))+((cj23*new_r01)));
evalcond[1]=(x533+((sj23*x534))+new_r01);
evalcond[2]=(x536+((new_r10*sj23))+((cj23*new_r00)));
evalcond[3]=(((cj23*new_r10))+(((-1.0)*new_r00*x537))+(((-1.0)*x532)));
evalcond[4]=(x536+(((-1.0)*new_r01*x537))+((cj23*new_r11)));
evalcond[5]=(x538+new_r00);
evalcond[6]=(x538+new_r11);
evalcond[7]=((((-1.0)*x534*x537))+new_r10+(((-1.0)*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x539=((((-1.0)*(1.0)*new_r02*sj23))+((cj23*new_r12)));
IkReal x540=(cj23*new_r02);
IkReal x541=(new_r12*sj23);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x539;
evalcond[7]=x539;
evalcond[8]=(x540+x541);
evalcond[9]=((((-1.0)*x540))+(((-1.0)*x541)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x542=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj23*x542))+((cj23*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj23*x542))+((cj23*new_r01))))+IKsqr(((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x542))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((-1.0)*sj23*x542))+((cj23*new_r01))), ((((-1.0)*(1.0)*new_r01*sj23))+(((-1.0)*cj23*x542))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x543=IKcos(j25);
IkReal x544=IKsin(j25);
IkReal x545=((1.0)*x544);
IkReal x546=((-1.0)*x545);
IkReal x547=(cj23*x543);
IkReal x548=((1.0)*sj23);
IkReal x549=((((-1.0)*cj23*x545))+((sj23*x543)));
evalcond[0]=(((new_r10*sj23))+((cj23*new_r00))+x543);
evalcond[1]=(((new_r11*sj23))+((cj23*new_r01))+x546);
evalcond[2]=(((sj23*x544))+new_r00+x547);
evalcond[3]=(((cj23*new_r10))+(((-1.0)*new_r00*x548))+x546);
evalcond[4]=(((cj23*new_r11))+(((-1.0)*new_r01*x548))+(((-1.0)*x543)));
evalcond[5]=(new_r01+x549);
evalcond[6]=(new_r10+x549);
evalcond[7]=((((-1.0)*x547))+(((-1.0)*x544*x548))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x550=((1.0)*cj24);
IkReal x551=((((-1.0)*x550))+new_r22);
IkReal x552=((1.0)*sj24);
IkReal x553=((((-1.0)*x552))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
evalcond[1]=x551;
evalcond[2]=x551;
evalcond[3]=x553;
evalcond[4]=new_r12;
evalcond[5]=x553;
evalcond[6]=(((cj24*new_r02))+(((-1.0)*new_r22*x552)));
evalcond[7]=((((-1.0)*new_r20*x550))+(((-1.0)*new_r00*x552)));
evalcond[8]=((((-1.0)*new_r21*x550))+(((-1.0)*new_r01*x552)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x550))+(((-1.0)*new_r02*x552)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r10, new_r11);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x554=IKcos(j25);
IkReal x555=IKsin(j25);
IkReal x556=((1.0)*x554);
IkReal x557=((-1.0)*x556);
IkReal x558=((1.0)*new_r02);
evalcond[0]=(((new_r02*x554))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x555)));
evalcond[2]=(x557+new_r11);
evalcond[3]=(((new_r22*x555))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*x555*x558)));
evalcond[5]=(new_r00+(((-1.0)*new_r22*x556)));
evalcond[6]=(((new_r01*new_r22))+x555+(((-1.0)*new_r21*x558)));
evalcond[7]=(x557+((new_r00*new_r22))+(((-1.0)*new_r20*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x559=((1.0)*cj24);
IkReal x560=((((-1.0)*x559))+new_r22);
IkReal x561=((1.0)*sj24);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
evalcond[1]=x560;
evalcond[2]=x560;
evalcond[3]=(sj24+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*new_r02))+(((-1.0)*x561)));
evalcond[6]=((((-1.0)*new_r02*x559))+(((-1.0)*new_r22*x561)));
evalcond[7]=((((-1.0)*new_r20*x559))+((new_r00*sj24)));
evalcond[8]=(((new_r01*sj24))+(((-1.0)*new_r21*x559)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x559))+((new_r02*sj24)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x563.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(x562.value)+(((1.5707963267949)*(x563.value))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x564=IKsin(j25);
IkReal x565=((1.0)*(IKcos(j25)));
IkReal x566=((-1.0)*x565);
IkReal x567=((1.0)*new_r01);
IkReal x568=((1.0)*new_r00);
evalcond[0]=(((new_r02*x564))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x565))+new_r20);
evalcond[2]=((((-1.0)*x564))+(((-1.0)*(1.0)*new_r10)));
evalcond[3]=((((-1.0)*(1.0)*new_r11))+x566);
evalcond[4]=((((-1.0)*x567))+((new_r22*x564)));
evalcond[5]=((((-1.0)*x568))+(((-1.0)*new_r22*x565)));
evalcond[6]=(((new_r02*new_r21))+(((-1.0)*new_r22*x567))+x564);
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x568))+x566);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j25]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x570=IKPowWithIntegerCheck(sj24,-1);
if(!x570.valid){
continue;
}
IkReal x569=x570.value;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(cj23,-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572=IKPowWithIntegerCheck(cj24,-1);
if(!x572.valid){
continue;
}
if( IKabs((x569*(x571.value)*(x572.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x569*(x571.value)*(x572.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24))))))+IKsqr(((-1.0)*new_r20*x569))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2((x569*(x571.value)*(x572.value)*((((new_r20*sj23))+(((-1.0)*(1.0)*new_r01*sj24))))), ((-1.0)*new_r20*x569));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x573=IKcos(j25);
IkReal x574=IKsin(j25);
IkReal x575=((1.0)*sj24);
IkReal x576=(cj23*new_r01);
IkReal x577=(new_r11*sj23);
IkReal x578=(cj24*x574);
IkReal x579=((1.0)*sj23);
IkReal x580=((1.0)*x574);
IkReal x581=((1.0)*x573);
IkReal x582=((-1.0)*x581);
IkReal x583=(cj23*new_r00);
IkReal x584=(new_r10*sj23);
IkReal x585=(cj23*x581);
evalcond[0]=(((sj24*x573))+new_r20);
evalcond[1]=((((-1.0)*x574*x575))+new_r21);
evalcond[2]=(x578+x577+x576);
evalcond[3]=((((-1.0)*x580))+((cj23*new_r10))+(((-1.0)*new_r00*x579)));
evalcond[4]=((((-1.0)*new_r01*x579))+((cj23*new_r11))+x582);
evalcond[5]=(new_r01+((cj23*x578))+((sj23*x573)));
evalcond[6]=((((-1.0)*cj24*x581))+x583+x584);
evalcond[7]=(((sj23*x574))+(((-1.0)*cj24*x585))+new_r00);
evalcond[8]=((((-1.0)*x585))+((sj23*x578))+new_r11);
evalcond[9]=((((-1.0)*cj23*x580))+new_r10+(((-1.0)*cj24*x573*x579)));
evalcond[10]=(((cj24*x577))+x574+(((-1.0)*new_r21*x575))+((cj24*x576)));
evalcond[11]=(((cj24*x583))+((cj24*x584))+x582+(((-1.0)*new_r20*x575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x588=IKPowWithIntegerCheck(sj24,-1);
if(!x588.valid){
continue;
}
IkReal x586=x588.value;
IkReal x587=((1.0)*new_r20);
CheckValue<IkReal> x589=IKPowWithIntegerCheck(sj23,-1);
if(!x589.valid){
continue;
}
if( IKabs((x586*(x589.value)*(((((-1.0)*cj23*cj24*x587))+(((-1.0)*(1.0)*new_r00*sj24)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x586*x587)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x586*(x589.value)*(((((-1.0)*cj23*cj24*x587))+(((-1.0)*(1.0)*new_r00*sj24))))))+IKsqr(((-1.0)*x586*x587))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2((x586*(x589.value)*(((((-1.0)*cj23*cj24*x587))+(((-1.0)*(1.0)*new_r00*sj24))))), ((-1.0)*x586*x587));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x590=IKcos(j25);
IkReal x591=IKsin(j25);
IkReal x592=((1.0)*sj24);
IkReal x593=(cj23*new_r01);
IkReal x594=(new_r11*sj23);
IkReal x595=(cj24*x591);
IkReal x596=((1.0)*sj23);
IkReal x597=((1.0)*x591);
IkReal x598=((1.0)*x590);
IkReal x599=((-1.0)*x598);
IkReal x600=(cj23*new_r00);
IkReal x601=(new_r10*sj23);
IkReal x602=(cj23*x598);
evalcond[0]=(((sj24*x590))+new_r20);
evalcond[1]=((((-1.0)*x591*x592))+new_r21);
evalcond[2]=(x594+x593+x595);
evalcond[3]=((((-1.0)*new_r00*x596))+((cj23*new_r10))+(((-1.0)*x597)));
evalcond[4]=(((cj23*new_r11))+(((-1.0)*new_r01*x596))+x599);
evalcond[5]=(((sj23*x590))+new_r01+((cj23*x595)));
evalcond[6]=((((-1.0)*cj24*x598))+x600+x601);
evalcond[7]=(((sj23*x591))+(((-1.0)*cj24*x602))+new_r00);
evalcond[8]=(((sj23*x595))+new_r11+(((-1.0)*x602)));
evalcond[9]=((((-1.0)*cj24*x590*x596))+(((-1.0)*cj23*x597))+new_r10);
evalcond[10]=(((cj24*x594))+((cj24*x593))+(((-1.0)*new_r21*x592))+x591);
evalcond[11]=(((cj24*x601))+(((-1.0)*new_r20*x592))+((cj24*x600))+x599);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
CheckValue<IkReal> x603=IKPowWithIntegerCheck(IKsign(sj24),-1);
if(!x603.valid){
continue;
}
CheckValue<IkReal> x604 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
j25array[0]=((-1.5707963267949)+(((1.5707963267949)*(x603.value)))+(x604.value));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[12];
IkReal x605=IKcos(j25);
IkReal x606=IKsin(j25);
IkReal x607=((1.0)*sj24);
IkReal x608=(cj23*new_r01);
IkReal x609=(new_r11*sj23);
IkReal x610=(cj24*x606);
IkReal x611=((1.0)*sj23);
IkReal x612=((1.0)*x606);
IkReal x613=((1.0)*x605);
IkReal x614=((-1.0)*x613);
IkReal x615=(cj23*new_r00);
IkReal x616=(new_r10*sj23);
IkReal x617=(cj23*x613);
evalcond[0]=(((sj24*x605))+new_r20);
evalcond[1]=((((-1.0)*x606*x607))+new_r21);
evalcond[2]=(x610+x608+x609);
evalcond[3]=((((-1.0)*x612))+((cj23*new_r10))+(((-1.0)*new_r00*x611)));
evalcond[4]=(x614+((cj23*new_r11))+(((-1.0)*new_r01*x611)));
evalcond[5]=(((sj23*x605))+((cj23*x610))+new_r01);
evalcond[6]=(x616+x615+(((-1.0)*cj24*x613)));
evalcond[7]=((((-1.0)*cj24*x617))+((sj23*x606))+new_r00);
evalcond[8]=((((-1.0)*x617))+new_r11+((sj23*x610)));
evalcond[9]=(new_r10+(((-1.0)*cj24*x605*x611))+(((-1.0)*cj23*x612)));
evalcond[10]=(((cj24*x608))+(((-1.0)*new_r21*x607))+x606+((cj24*x609)));
evalcond[11]=(x614+((cj24*x615))+(((-1.0)*new_r20*x607))+((cj24*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - velma (c418332bf6a4c327dc7d499a84110c0e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#define IKFAST_NO_MAIN

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
